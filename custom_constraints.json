{
  "constraints": [
    {
      "service": "Access Context Manager",
      "resource_type": "accesscontextmanager.googleapis.com/AccessLevel",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/access-context-manager/docs/custom-constraints",
      "fields": [
        "resource.assetType",
        "resource.authorizationDirection",
        "resource.authorizationType",
        "resource.basic.combiningFunction",
        "resource.basic.conditions.devicePolicy.allowedDeviceManagementLevels",
        "resource.basic.conditions.devicePolicy.allowedEncryptionStatuses",
        "resource.basic.conditions.devicePolicy.osConstraints.minimumVersion",
        "resource.basic.conditions.devicePolicy.osConstraints.osType",
        "resource.basic.conditions.devicePolicy.osConstraints.requireVerifiedChromeOs",
        "resource.basic.conditions.devicePolicy.requireAdminApproval",
        "resource.basic.conditions.devicePolicy.requireCorpOwned",
        "resource.basic.conditions.devicePolicy.requireScreenlock",
        "resource.basic.conditions.exists(c,",
        "resource.basic.conditions.ipSubnetworks",
        "resource.basic.conditions.members",
        "resource.basic.conditions.negate",
        "resource.basic.conditions.regions",
        "resource.basic.conditions.requiredAccessLevels",
        "resource.custom.expr",
        "resource.description",
        "resource.orgs",
        "resource.parent",
        "resource.perimeterType",
        "resource.scopes",
        "resource.spec.accessLevels",
        "resource.spec.egressPolicies.egressFrom.identities",
        "resource.spec.egressPolicies.egressFrom.identityType",
        "resource.spec.egressPolicies.egressFrom.sourceRestriction",
        "resource.spec.egressPolicies.egressTo.externalResources",
        "resource.spec.egressPolicies.egressTo.operations.methodSelectors.method",
        "resource.spec.egressPolicies.egressTo.operations.methodSelectors.permission",
        "resource.spec.egressPolicies.egressTo.operations.serviceName",
        "resource.spec.egressPolicies.egressTo.resources",
        "resource.spec.ingressPolicies.ingressFrom.identities",
        "resource.spec.ingressPolicies.ingressFrom.identityType",
        "resource.spec.ingressPolicies.ingressFrom.sources.accessLevel",
        "resource.spec.ingressPolicies.ingressFrom.sources.resource",
        "resource.spec.ingressPolicies.ingressTo.operations.methodSelectors.method",
        "resource.spec.ingressPolicies.ingressTo.operations.methodSelectors.permission",
        "resource.spec.ingressPolicies.ingressTo.operations.serviceName",
        "resource.spec.ingressPolicies.ingressTo.resources",
        "resource.spec.resources",
        "resource.spec.restrictedServices",
        "resource.spec.vpcAccessibleServices.allowedServices",
        "resource.spec.vpcAccessibleServices.enableRestriction",
        "resource.status.accessLevels",
        "resource.status.egressPolicies.egressFrom.identities",
        "resource.status.egressPolicies.egressFrom.identityType",
        "resource.status.egressPolicies.egressFrom.sourceRestriction",
        "resource.status.egressPolicies.egressTo.externalResources",
        "resource.status.egressPolicies.egressTo.operations.methodSelectors.method",
        "resource.status.egressPolicies.egressTo.operations.methodSelectors.permission",
        "resource.status.egressPolicies.egressTo.operations.serviceName",
        "resource.status.egressPolicies.egressTo.resources",
        "resource.status.ingressPolicies.ingressFrom.identities",
        "resource.status.ingressPolicies.ingressFrom.identityType",
        "resource.status.ingressPolicies.ingressFrom.sources.accessLevel",
        "resource.status.ingressPolicies.ingressFrom.sources.resource",
        "resource.status.ingressPolicies.ingressTo.operations.methodSelectors.method",
        "resource.status.ingressPolicies.ingressTo.operations.methodSelectors.permission",
        "resource.status.ingressPolicies.ingressTo.operations.serviceName",
        "resource.status.ingressPolicies.ingressTo.resources",
        "resource.status.resources",
        "resource.status.restrictedServices",
        "resource.status.vpcAccessibleServices.allowedServices",
        "resource.status.vpcAccessibleServices.enableRestriction",
        "resource.title",
        "resource.useExplicitDryRunSpec"
      ]
    },
    {
      "service": "AlloyDB for PostgreSQL",
      "resource_type": "alloydb.googleapis.com/Backup",
      "launch_status": "Preview",
      "doc_url": "https://cloud.google.com/alloydb/docs/alloydb-custom-constraints",
      "fields": [
        "resource.networkConfig.enablePublicIp"
      ]
    },
    {
      "service": "API keys",
      "resource_type": "apikeys.googleapis.com/Key",
      "launch_status": "Preview",
      "doc_url": "https://cloud.google.com/api-keys/docs/custom-constraints",
      "fields": [
        "resource.displayName",
        "resource.restrictions.androidKeyRestrictions.allowedApplications.packageName",
        "resource.restrictions.androidKeyRestrictions.allowedApplications.sha1Fingerprint",
        "resource.restrictions.apiTargets.methods",
        "resource.restrictions.apiTargets.service",
        "resource.restrictions.browserKeyRestrictions.allowedReferrers",
        "resource.restrictions.iosKeyRestrictions.allowedBundleIds",
        "resource.restrictions.serverKeyRestrictions.allowedIps",
        "resource.serviceAccountEmail"
      ]
    },
    {
      "service": "Artifact Registry",
      "resource_type": "artifactregistry.googleapis.com/Repository",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/artifact-registry/docs/custom-constraints",
      "fields": []
    },
    {
      "service": "Google Cloud Armor",
      "resource_type": "compute.googleapis.com/NetworkEdgeSecurityService",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/armor/docs/custom-constraints",
      "fields": [
        "resource.adaptiveProtectionConfig",
        "resource.adaptiveProtectionConfig.autoDeployConfig",
        "resource.adaptiveProtectionConfig.autoDeployConfig.confidenceThreshold",
        "resource.adaptiveProtectionConfig.autoDeployConfig.expirationSec",
        "resource.adaptiveProtectionConfig.autoDeployConfig.impactedBaselineThreshold",
        "resource.adaptiveProtectionConfig.autoDeployConfig.loadThreshold",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.enable",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.ruleVisibility",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[]",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].autoDeployConfidenceThreshold",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].autoDeployExpirationSec",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].autoDeployImpactedBaselineThreshold",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].autoDeployLoadThreshold",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].detectionAbsoluteQps",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].detectionLoadThreshold",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].detectionRelativeToBaselineQps",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].name",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].trafficGranularityConfigs[]",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].trafficGranularityConfigs[].enableEachUniqueValue",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].trafficGranularityConfigs[].type",
        "resource.adaptiveProtectionConfig.layer7DdosDefenseConfig.thresholdConfigs[].trafficGranularityConfigs[].value",
        "resource.advancedOptionsConfig",
        "resource.advancedOptionsConfig,jsonCustomConfig",
        "resource.advancedOptionsConfig,jsonCustomConfig.contentTypes[]",
        "resource.advancedOptionsConfig,jsonParsing",
        "resource.advancedOptionsConfig.logLevel",
        "resource.advancedOptionsConfig.userIpRequestHeaders[]",
        "resource.ddosProtectionConfig",
        "resource.ddosProtectionConfig.ddosProtection",
        "resource.description",
        "resource.headerAction",
        "resource.headerAction.requestHeadersToAdds[]",
        "resource.name",
        "resource.recaptchaOptionsConfig",
        "resource.recaptchaOptionsConfig.redirectSiteKey",
        "resource.requestHeadersToAdds.requestHeadersToAdds[].headerName",
        "resource.requestHeadersToAdds.requestHeadersToAdds[].headerValue",
        "resource.rules[]",
        "resource.rules[].config",
        "resource.rules[].config.srcIpRanges[]",
        "resource.rules[].destIpRanges",
        "resource.rules[].destPorts",
        "resource.rules[].expr",
        "resource.rules[].exprOption.recaptchaOptions",
        "resource.rules[].exprOption.recaptchaOptions.actionTokenSiteKeys",
        "resource.rules[].exprOption.recaptchaOptions.sessionTokenSiteKeys",
        "resource.rules[].exprOptions",
        "resource.rules[].ipProtocols",
        "resource.rules[].match",
        "resource.rules[].networkMatch",
        "resource.rules[].preconfiguredWafConfig",
        "resource.rules[].preconfiguredWafConfig.exclusions[]",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestCookiesToExclude[]",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestCookiesToExclude[].op",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestCookiesToExclude[].val",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestHeadersToExclude[]",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestHeadersToExclude[].op",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestHeadersToExclude[].val",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestQueryParamsToExclude[]",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestQueryParamsToExclude[].op",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestQueryParamsToExclude[].val",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestUrisToExclude[]",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestUrisToExclude[].op",
        "resource.rules[].preconfiguredWafConfig.exclusions[].requestUrisToExclude[].val",
        "resource.rules[].preconfiguredWafConfig.exclusions[].targetRuleIds[]",
        "resource.rules[].preconfiguredWafConfig.exclusions[].targetRuleSet",
        "resource.rules[].rateLimitOptions[]",
        "resource.rules[].rateLimitOptions[].banDurationSec",
        "resource.rules[].rateLimitOptions[].banThreshold",
        "resource.rules[].rateLimitOptions[].banThreshold.count",
        "resource.rules[].rateLimitOptions[].banThreshold.intervalSec",
        "resource.rules[].rateLimitOptions[].conformAction",
        "resource.rules[].rateLimitOptions[].enforceOnKey",
        "resource.rules[].rateLimitOptions[].enforceOnKeyConfigs",
        "resource.rules[].rateLimitOptions[].enforceOnKeyConfigs.enforceOnKeyName",
        "resource.rules[].rateLimitOptions[].enforceOnKeyConfigs.enforceOnKeyType",
        "resource.rules[].rateLimitOptions[].enforceOnKeyName",
        "resource.rules[].rateLimitOptions[].exceedAction",
        "resource.rules[].rateLimitOptions[].exceedActionRpcStatus",
        "resource.rules[].rateLimitOptions[].exceedActionRpcStatus.code",
        "resource.rules[].rateLimitOptions[].exceedActionRpcStatus.message",
        "resource.rules[].rateLimitOptions[].exceedRedirectOptions",
        "resource.rules[].rateLimitOptions[].exceedRedirectOptions.target",
        "resource.rules[].rateLimitOptions[].exceedRedirectOptions.type",
        "resource.rules[].rateLimitOptions[].rateLimitThreshold",
        "resource.rules[].rateLimitOptions[].rateLimitThreshold.count",
        "resource.rules[].rateLimitOptions[].rateLimitThreshold.intervalSec",
        "resource.rules[].redirectOptions[]",
        "resource.rules[].redirectOptions[].target",
        "resource.rules[].redirectOptions[].type",
        "resource.rules[].redirectTarget",
        "resource.rules[].ruleNumber",
        "resource.rules[].srcAsns",
        "resource.rules[].srcIpRanges",
        "resource.rules[].srcPorts",
        "resource.rules[].srcRegionCodes",
        "resource.rules[].userDefinedFieldMatch",
        "resource.rules[].userDefinedFieldMatch.name",
        "resource.rules[].userDefinedFieldMatch.values",
        "resource.rules[].versionedExpr",
        "resource.securityPolicy",
        "resource.type",
        "resource.userDefinedFields[]",
        "resource.userDefinedFields[].base",
        "resource.userDefinedFields[].mask",
        "resource.userDefinedFields[].name",
        "resource.userDefinedFields[].offset",
        "resource.userDefinedFields[].size"
      ]
    },
    {
      "service": "BigQuery",
      "resource_type": "bigquery.googleapis.com/Dataset",
      "launch_status": "Preview",
      "doc_url": "https://cloud.google.com/bigquery/docs/custom-constraints",
      "fields": [
        "resource.datasetReference.datasetId",
        "resource.defaultCollation",
        "resource.defaultEncryptionConfiguration.kmsKeyName",
        "resource.defaultPartitionExpirationMs",
        "resource.defaultRoundingMode",
        "resource.defaultTableExpirationMs",
        "resource.description",
        "resource.externalCatalogDatasetOptions.defaultStorageLocationUri",
        "resource.externalCatalogDatasetOptions.parameters",
        "resource.externalDatasetReference.connection",
        "resource.externalDatasetReference.externalSource",
        "resource.friendlyName",
        "resource.isCaseInsensitive",
        "resource.linkedDatasetSource.sourceDataset.datasetId",
        "resource.location",
        "resource.maxTimeTravelHours",
        "resource.storageBillingModel"
      ]
    },
    {
      "service": "Cloud Bigtable Admin API",
      "resource_type": "bigtableadmin.googleapis.com/AppProfile",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/bigtable/docs/custom-constraints",
      "fields": [
        "resource.automatedBackupPolicy.frequency",
        "resource.automatedBackupPolicy.retentionPeriod",
        "resource.backupType",
        "resource.changeStreamConfig.retentionPeriod",
        "resource.clusterConfig.clusterAutoscalingConfig.autoscalingLimits.maxServeNodes",
        "resource.clusterConfig.clusterAutoscalingConfig.autoscalingLimits.minServeNodes",
        "resource.clusterConfig.clusterAutoscalingConfig.autoscalingTargets.cpuUtilizationPercent",
        "resource.clusterConfig.clusterAutoscalingConfig.autoscalingTargets.storageUtilizationGibPerNode",
        "resource.columnFamilies[*].gcRule.maxAge",
        "resource.columnFamilies[*].gcRule.maxNumVersions",
        "resource.columnFamilies[*].valueType.bytesType.encoding.raw.escapeNulls",
        "resource.columnFamilies[*].valueType.int64Type.encoding.bigEndianBytes.bytesType.encoding.raw.escapeNulls",
        "resource.columnFamilies[*].valueType.stringType.encoding.utf8Bytes.nullEscapeChar",
        "resource.columnFamilies[*].valueType.structType.encoding.delimitedBytes.delimiter",
        "resource.columnFamilies[*].valueType.structType.fields.fieldName",
        "resource.columnFamilies[*].valueType.timestampType.encoding.unixMicrosInt64.bigEndianBytes.bytesType.encoding.raw.escapeNulls",
        "resource.dataBoostIsolationReadOnly.computeBillingOwner",
        "resource.defaultStorageType",
        "resource.deletionProtection",
        "resource.description",
        "resource.displayName",
        "resource.encryptionConfig.kmsKeyName",
        "resource.expireTime",
        "resource.hotToStandardTime",
        "resource.location",
        "resource.multiClusterRoutingUseAny.clusterIds",
        "resource.name",
        "resource.nodeScalingFactor",
        "resource.serveNodes",
        "resource.singleClusterRouting.allowTransactionalWrites",
        "resource.singleClusterRouting.clusterId",
        "resource.sourceTable",
        "resource.standardIsolation.priority"
      ]
    },
    {
      "service": "Binary Authorization",
      "resource_type": "binaryauthorization.googleapis.com/Attestor",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/binary-authorization/docs/binary-authorization-custom-constraints",
      "fields": [
        "resource.admissionWhitelistPatterns.namePattern",
        "resource.clusterAdmissionRules[*].enforcementMode",
        "resource.clusterAdmissionRules[*].evaluationMode",
        "resource.clusterAdmissionRules[*].requireAttestationsBy",
        "resource.defaultAdmissionRule.enforcementMode",
        "resource.defaultAdmissionRule.evaluationMode",
        "resource.defaultAdmissionRule.requireAttestationsBy",
        "resource.description",
        "resource.globalPolicyEvaluationMode",
        "resource.istioServiceIdentityAdmissionRules[*].enforcementMode",
        "resource.istioServiceIdentityAdmissionRules[*].evaluationMode",
        "resource.istioServiceIdentityAdmissionRules[*].requireAttestationsBy",
        "resource.kubernetesNamespaceAdmissionRules[*].enforcementMode",
        "resource.kubernetesNamespaceAdmissionRules[*].evaluationMode",
        "resource.kubernetesNamespaceAdmissionRules[*].requireAttestationsBy",
        "resource.kubernetesServiceAccountAdmissionRules[*].enforcementMode",
        "resource.kubernetesServiceAccountAdmissionRules[*].evaluationMode",
        "resource.kubernetesServiceAccountAdmissionRules[*].requireAttestationsBy",
        "resource.name",
        "resource.userOwnedGrafeasNote.noteReference",
        "resource.userOwnedGrafeasNote.publicKeys.asciiArmoredPgpPublicKey",
        "resource.userOwnedGrafeasNote.publicKeys.comment",
        "resource.userOwnedGrafeasNote.publicKeys.pkixPublicKey.keyId",
        "resource.userOwnedGrafeasNote.publicKeys.pkixPublicKey.publicKeyPem",
        "resource.userOwnedGrafeasNote.publicKeys.pkixPublicKey.signatureAlgorithm"
      ]
    },
    {
      "service": "BigQuery Data Transfer Service",
      "resource_type": "bigquerydatatransfer.googleapis.com/TransferConfig",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/bigquery/docs/transfer-custom-constraints",
      "fields": [
        "resource.dataRefreshWindowDays",
        "resource.dataSourceId",
        "resource.destinationDatasetId",
        "resource.disabled",
        "resource.displayName",
        "resource.emailPreferences.enableFailureEmail",
        "resource.encryptionConfiguration.kmsKeyName",
        "resource.name",
        "resource.notificationPubsubTopic",
        "resource.schedule",
        "resource.scheduleOptions.disableAutoScheduling",
        "resource.scheduleOptions.endTime",
        "resource.scheduleOptions.startTime",
        "resource.scheduleOptionsV2.eventDrivenSchedule.pubsubSubscription",
        "resource.scheduleOptionsV2.timeBasedSchedule.endTime",
        "resource.scheduleOptionsV2.timeBasedSchedule.schedule",
        "resource.scheduleOptionsV2.timeBasedSchedule.startTime"
      ]
    },
    {
      "service": "Cloud Build",
      "resource_type": "cloudbuild.googleapis.com/BitbucketServerConfig",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/build/docs/custom-constraints",
      "fields": [
        "resource.annotations",
        "resource.apiKey",
        "resource.appId",
        "resource.approvalConfig.approvalRequired",
        "resource.artifacts.images",
        "resource.artifacts.objects.location",
        "resource.artifacts.objects.paths",
        "resource.availableSecrets.inline.envMap",
        "resource.availableSecrets.inline.kmsKeyName",
        "resource.availableSecrets.secretManager.env",
        "resource.availableSecrets.secretManager.versionName",
        "resource.bitbucketCloudConfig.authorizerCredential.oauthTokenSecretVersionName",
        "resource.bitbucketCloudConfig.readAuthorizerCredential.oauthTokenSecretVersionName",
        "resource.bitbucketCloudConfig.webhookSecretSecretVersion",
        "resource.bitbucketCloudConfig.workspace",
        "resource.bitbucketDataCenterConfig.authorizerCredential.oauthTokenSecretVersionName",
        "resource.bitbucketDataCenterConfig.hostUri",
        "resource.bitbucketDataCenterConfig.readAuthorizerCredential.oauthTokenSecretVersionName",
        "resource.bitbucketDataCenterConfig.serviceDirectoryConfig.service",
        "resource.bitbucketDataCenterConfig.sslCa",
        "resource.bitbucketDataCenterConfig.webhookSecretSecretVersion",
        "resource.bitbucketServerTriggerConfig.projectKey",
        "resource.bitbucketServerTriggerConfig.pullRequest.branch",
        "resource.bitbucketServerTriggerConfig.pullRequest.commentControl",
        "resource.bitbucketServerTriggerConfig.pullRequest.invertRegex",
        "resource.bitbucketServerTriggerConfig.push.branch",
        "resource.bitbucketServerTriggerConfig.push.invertRegex",
        "resource.bitbucketServerTriggerConfig.push.tag",
        "resource.bitbucketServerTriggerConfig.repoSlug",
        "resource.description",
        "resource.disabled",
        "resource.displayName",
        "resource.eventType",
        "resource.filter",
        "resource.gitConfig.http",
        "resource.gitConfig.proxySecretVersionName",
        "resource.gitConfig.proxySslCaInfo",
        "resource.github.enterpriseConfigResourceName",
        "resource.github.name",
        "resource.github.owner",
        "resource.githubConfig.appInstallationId",
        "resource.githubConfig.authorizerCredential.oauthTokenSecretVersionName",
        "resource.githubEnterpriseConfig.apiKey",
        "resource.githubEnterpriseConfig.appId",
        "resource.githubEnterpriseConfig.appInstallationId",
        "resource.githubEnterpriseConfig.appSlug",
        "resource.githubEnterpriseConfig.authorizerCredential.oauthTokenSecretVersionName",
        "resource.githubEnterpriseConfig.hostUrl",
        "resource.githubEnterpriseConfig.oauthClientIdSecretVersion",
        "resource.githubEnterpriseConfig.oauthSecretSecretVersion",
        "resource.githubEnterpriseConfig.privateKeySecretVersion",
        "resource.githubEnterpriseConfig.serviceDirectoryConfig.service",
        "resource.githubEnterpriseConfig.sslCa",
        "resource.githubEnterpriseConfig.webhookSecretSecretVersion",
        "resource.gitlabConfig.authorizerCredential.oauthTokenSecretVersionName",
        "resource.gitlabConfig.hostUri",
        "resource.gitlabConfig.readAuthorizerCredential.oauthTokenSecretVersionName",
        "resource.gitlabConfig.serviceDirectoryConfig.service",
        "resource.gitlabConfig.sslCa",
        "resource.gitlabConfig.webhookSecretSecretVersion",
        "resource.gitlabEnterpriseEventsConfig.gitlabConfigResource",
        "resource.gitlabEnterpriseEventsConfig.projectNamespace",
        "resource.gitlabEnterpriseEventsConfig.pullRequest.branch",
        "resource.gitlabEnterpriseEventsConfig.pullRequest.commentControl",
        "resource.gitlabEnterpriseEventsConfig.pullRequest.invertRegex",
        "resource.gitlabEnterpriseEventsConfig.push.branch",
        "resource.gitlabEnterpriseEventsConfig.push.invertRegex",
        "resource.gitlabEnterpriseEventsConfig.push.tag",
        "resource.hostUrl",
        "resource.ignoredFiles",
        "resource.images",
        "resource.includeBuildLogs",
        "resource.includedFiles",
        "resource.logsBucket",
        "resource.name",
        "resource.options.autoMapSubstitutions",
        "resource.options.defaultLogsBucketBehavior",
        "resource.options.diskSizeGb",
        "resource.options.dynamicSubstitutions",
        "resource.options.env",
        "resource.options.logStreamingOption",
        "resource.options.logging",
        "resource.options.machineType",
        "resource.options.pool.name",
        "resource.options.requestedVerifyOption",
        "resource.options.secretEnv",
        "resource.options.sourceProvenanceHash",
        "resource.options.substitutionOption",
        "resource.options.volumes.name",
        "resource.options.volumes.path",
        "resource.peeredNetwork",
        "resource.peeredNetworkIpRange",
        "resource.privatePoolV1Config.networkConfig.egressOption",
        "resource.privatePoolV1Config.networkConfig.peeredNetwork",
        "resource.privatePoolV1Config.networkConfig.peeredNetworkIpRange",
        "resource.privatePoolV1Config.workerConfig.diskSizeGb",
        "resource.privatePoolV1Config.workerConfig.machineType",
        "resource.pubsubConfig.serviceAccountEmail",
        "resource.pubsubConfig.topic",
        "resource.queueTtl",
        "resource.remoteUri",
        "resource.repositoryEventConfig.pullRequest.branch",
        "resource.repositoryEventConfig.pullRequest.commentControl",
        "resource.repositoryEventConfig.pullRequest.invertRegex",
        "resource.repositoryEventConfig.push.branch",
        "resource.repositoryEventConfig.push.invertRegex",
        "resource.repositoryEventConfig.push.tag",
        "resource.repositoryEventConfig.repository",
        "resource.resourceName",
        "resource.secrets.adminAccessTokenVersionName",
        "resource.secrets.kmsKeyName",
        "resource.secrets.oauthClientIdVersionName",
        "resource.secrets.oauthSecretVersionName",
        "resource.secrets.privateKeyVersionName",
        "resource.secrets.readAccessTokenVersionName",
        "resource.secrets.secretEnv",
        "resource.secrets.webhookSecretVersionName",
        "resource.serviceAccount",
        "resource.source.connectedRepository.dir",
        "resource.source.connectedRepository.repository",
        "resource.source.connectedRepository.revision",
        "resource.source.developerConnectConfig.dir",
        "resource.source.developerConnectConfig.gitRepositoryLink",
        "resource.source.developerConnectConfig.revision",
        "resource.source.gitSource.dir",
        "resource.source.gitSource.revision",
        "resource.source.gitSource.url",
        "resource.source.repoSource.branchName",
        "resource.source.repoSource.commitSha",
        "resource.source.repoSource.dir",
        "resource.source.repoSource.invertRegex",
        "resource.source.repoSource.projectId",
        "resource.source.repoSource.repoName",
        "resource.source.repoSource.substitutions",
        "resource.source.repoSource.tagName",
        "resource.source.storageSource.bucket",
        "resource.source.storageSource.generation",
        "resource.source.storageSource.object",
        "resource.source.storageSource.sourceFetcher",
        "resource.source.storageSourceManifest.bucket",
        "resource.source.storageSourceManifest.generation",
        "resource.source.storageSourceManifest.object",
        "resource.sourceToBuild.githubEnterpriseConfig",
        "resource.sourceToBuild.ref",
        "resource.sourceToBuild.repoType",
        "resource.sourceToBuild.repository",
        "resource.sourceToBuild.uri",
        "resource.sslCa",
        "resource.steps.allowExitCodes",
        "resource.steps.allowFailure",
        "resource.steps.args",
        "resource.steps.automapSubstitutions",
        "resource.steps.dir",
        "resource.steps.entryPoints",
        "resource.steps.env",
        "resource.steps.id",
        "resource.steps.name",
        "resource.steps.script",
        "resource.steps.secretEnv",
        "resource.steps.timeout",
        "resource.steps.volumes.name",
        "resource.steps.volumes.path",
        "resource.steps.waitFor",
        "resource.substitutions",
        "resource.tags",
        "resource.timeout",
        "resource.triggerTemplate.branchName",
        "resource.triggerTemplate.commitSha",
        "resource.triggerTemplate.dir",
        "resource.triggerTemplate.invertRegex",
        "resource.triggerTemplate.projectId",
        "resource.triggerTemplate.repoName",
        "resource.triggerTemplate.substitutions",
        "resource.triggerTemplate.tagName",
        "resource.username",
        "resource.webhookConfig.secret",
        "resource.webhookKey"
      ]
    },
    {
      "service": "Google Cloud Contact Center as a Service",
      "resource_type": "contactcenteraiplatform.googleapis.com/ContactCenter",
      "launch_status": "Preview",
      "doc_url": "https://cloud.google.com/contact-center/ccai-platform/docs/ccaip-custom-constraints",
      "fields": [
        "resource.name",
        "resource.name.matches(\"projects/my-project/locations/us-central1/contactCenters/myContactCenter\")",
        "resource.privateAccess.ingressSettings.exists(private_component,"
      ]
    },
    {
      "service": "Certificate Manager",
      "resource_type": "certificatemanager.googleapis.com/Certificate",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/certificate-manager/docs/custom-constraints",
      "fields": [
        "resource.allowlistedCertificates.pemCertificate",
        "resource.certificateAuthorityConfig.certificateAuthorityServiceConfig.caPool",
        "resource.certificates",
        "resource.description",
        "resource.domain",
        "resource.hostname",
        "resource.keyAlgorithm",
        "resource.lifetime",
        "resource.managed.dnsAuthorizations",
        "resource.managed.domains",
        "resource.managed.issuanceConfig",
        "resource.matcher",
        "resource.name",
        "resource.rotationWindowPercentage",
        "resource.scope",
        "resource.selfManaged.pemCertificate",
        "resource.trustStores.intermediateCas.pemCertificate",
        "resource.trustStores.trustAnchors.pemCertificate",
        "resource.type"
      ]
    },
    {
      "service": "Identity Platform",
      "resource_type": "identitytoolkit.googleapis.com/Config",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/identity-platform/docs/admin/org-policy-custom-constraints",
      "fields": [
        "resource.client_secret",
        "resource.notification.send_email.smtp.password",
        "resource.signIn.email.passwordRequired"
      ]
    },
    {
      "service": "Cloud Quotas",
      "resource_type": "cloudquotas.googleapis.com/QuotaPreference",
      "launch_status": "Preview",
      "doc_url": "https://cloud.google.com/docs/quotas/custom-constraints",
      "fields": [
        "resource.dimensions",
        "resource.name",
        "resource.quotaConfig.preferredValue",
        "resource.quotaId",
        "resource.service"
      ]
    },
    {
      "service": "Cloud Run functions",
      "resource_type": "cloudfunctions.googleapis.com/Function",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/functions/docs/securing/custom-constraints",
      "fields": []
    },
    {
      "service": "Cloud Run",
      "resource_type": "run.googleapis.com/Job",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/run/docs/securing/custom-constraints",
      "fields": []
    },
    {
      "service": "Cloud Composer",
      "resource_type": "composer.googleapis.com/Environment",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/composer/docs/latest/create-custom-constraints",
      "fields": [
        "resource.config.environmentSize",
        "resource.config.maintenanceWindow.recurrence",
        "resource.config.masterAuthorizedNetworksConfig.enabled",
        "resource.config.nodeConfig.enableIpMasqAgent",
        "resource.config.nodeConfig.network",
        "resource.config.nodeConfig.serviceAccount",
        "resource.config.nodeConfig.subnetwork",
        "resource.config.privateEnvironmentConfig.cloudComposerConnectionSubnetwork",
        "resource.config.privateEnvironmentConfig.enablePrivateBuildsOnly",
        "resource.config.privateEnvironmentConfig.enablePrivateEnvironment",
        "resource.config.privateEnvironmentConfig.enablePrivatelyUsedPublicIps",
        "resource.config.privateEnvironmentConfig.networkingConfig.connectionType",
        "resource.config.privateEnvironmentConfig.privateClusterConfig.enablePrivateEndpoint",
        "resource.config.recoveryConfig.scheduledSnapshotsConfig.enabled",
        "resource.config.recoveryConfig.scheduledSnapshotsConfig.snapshotCreationSchedule",
        "resource.config.recoveryConfig.scheduledSnapshotsConfig.snapshotLocation",
        "resource.config.recoveryConfig.scheduledSnapshotsConfig.timeZone",
        "resource.config.resilienceMode",
        "resource.config.softwareConfig.cloudDataLineageIntegration.enabled",
        "resource.config.softwareConfig.imageVersion",
        "resource.config.softwareConfig.webServerPluginsMode",
        "resource.config.workloadsConfig.dagProcessor.count",
        "resource.config.workloadsConfig.dagProcessor.cpu",
        "resource.config.workloadsConfig.dagProcessor.memoryGb",
        "resource.config.workloadsConfig.dagProcessor.storageGb",
        "resource.config.workloadsConfig.scheduler.count",
        "resource.config.workloadsConfig.scheduler.cpu",
        "resource.config.workloadsConfig.scheduler.memoryGb",
        "resource.config.workloadsConfig.scheduler.storageGb",
        "resource.config.workloadsConfig.triggerer.count",
        "resource.config.workloadsConfig.triggerer.cpu",
        "resource.config.workloadsConfig.triggerer.memoryGb",
        "resource.config.workloadsConfig.webServer.cpu",
        "resource.config.workloadsConfig.webServer.memoryGb",
        "resource.config.workloadsConfig.webServer.storageGb",
        "resource.config.workloadsConfig.worker.cpu",
        "resource.config.workloadsConfig.worker.maxCount",
        "resource.config.workloadsConfig.worker.memoryGb",
        "resource.config.workloadsConfig.worker.minCount",
        "resource.config.workloadsConfig.worker.storageGb",
        "resource.name"
      ]
    },
    {
      "service": "Compute Engine",
      "resource_type": "compute.googleapis.com/Disk",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/compute/docs/access/custom-constraints",
      "fields": [
        "resource.advancedMachineFeatures.enableNestedVirtualization",
        "resource.advancedMachineFeatures.performanceMonitoringUnit",
        "resource.advancedMachineFeatures.threadsPerCore",
        "resource.canIpForward",
        "resource.confidentialInstanceConfig.confidentialInstanceType",
        "resource.confidentialInstanceConfig.enableConfidentialCompute",
        "resource.deletionProtection",
        "resource.enableConfidentialCompute",
        "resource.guestAccelerators.acceleratorCount",
        "resource.guestAccelerators.acceleratorType",
        "resource.labels",
        "resource.licenseCodes",
        "resource.licenses",
        "resource.machineType",
        "resource.minCpuPlatform",
        "resource.name",
        "resource.networkInterfaces.network",
        "resource.networkInterfaces.networkAttachment",
        "resource.networkInterfaces.subnetwork",
        "resource.privateIpv6GoogleAccess",
        "resource.rawDisk.source",
        "resource.scheduling.nodeAffinities.key",
        "resource.scheduling.nodeAffinities.operator",
        "resource.scheduling.nodeAffinities.values",
        "resource.shieldedInstanceConfig.enableIntegrityMonitoring",
        "resource.shieldedInstanceConfig.enableSecureBoot",
        "resource.shieldedInstanceConfig.enableVtpm",
        "resource.sizeGb",
        "resource.sourceImage",
        "resource.type",
        "resource.zone"
      ]
    },
    {
      "service": "Resource Manager",
      "resource_type": "cloudresourcemanager.googleapis.com/Folder",
      "launch_status": "Preview",
      "doc_url": "https://cloud.google.com/resource-manager/docs/custom-constraints",
      "fields": [
        "resource.displayName",
        "resource.parent",
        "resource.projectId"
      ]
    },
    {
      "service": "Cloud Data Fusion",
      "resource_type": "datafusion.googleapis.com/DnsPeering",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/data-fusion/docs/how-to/create-custom-constraints",
      "fields": [
        "resource.cryptoKeyConfig.keyReference",
        "resource.dataplexDataLineageIntegrationEnabled",
        "resource.dataprocServiceAccount",
        "resource.description",
        "resource.displayName",
        "resource.domain",
        "resource.enableRbac",
        "resource.enableStackdriverLogging",
        "resource.enableStackdriverMonitoring",
        "resource.eventPublishConfig.enabled",
        "resource.eventPublishConfig.topic",
        "resource.maintenancePolicy.maintenanceExclusionWindow.endTime",
        "resource.maintenancePolicy.maintenanceExclusionWindow.startTime",
        "resource.maintenancePolicy.maintenanceWindow.recurringTimeWindow.recurrence",
        "resource.maintenancePolicy.maintenanceWindow.recurringTimeWindow.window.endTime",
        "resource.maintenancePolicy.maintenanceWindow.recurringTimeWindow.window.startTime",
        "resource.name",
        "resource.networkConfig.connectionType",
        "resource.networkConfig.ipAllocation",
        "resource.networkConfig.network",
        "resource.networkConfig.privateServiceConnectConfig.networkAttachment",
        "resource.networkConfig.privateServiceConnectConfig.unreachableCidrBlock",
        "resource.options",
        "resource.patchRevision",
        "resource.privateInstance",
        "resource.targetNetwork",
        "resource.targetProject",
        "resource.type",
        "resource.version",
        "resource.zone"
      ]
    },
    {
      "service": "Data Lineage API",
      "resource_type": "datalineage.googleapis.com/Process",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/dataplex/docs/lineage-custom-constraints",
      "fields": [
        "resource.displayName",
        "resource.name",
        "resource.origin.name",
        "resource.origin.sourceType"
      ]
    },
    {
      "service": "Dataflow",
      "resource_type": "dataflow.googleapis.com/Job",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/dataflow/docs/custom-constraints",
      "fields": [
        "resource.environment.serviceOptions.exists(value,"
      ]
    },
    {
      "service": "Dataplex Universal Catalog",
      "resource_type": "dataplex.googleapis.com/AspectType",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/dataplex/docs/dataplex-custom-constraints",
      "fields": [
        "resource.authorization.alternateUsePermission",
        "resource.data.entity",
        "resource.data.resource",
        "resource.dataDiscoverySpec.bigqueryPublishingConfig.connection",
        "resource.dataDiscoverySpec.bigqueryPublishingConfig.location",
        "resource.dataDiscoverySpec.bigqueryPublishingConfig.tableType",
        "resource.dataDiscoverySpec.storageConfig.csvOptions.delimiter",
        "resource.dataDiscoverySpec.storageConfig.csvOptions.encoding",
        "resource.dataDiscoverySpec.storageConfig.csvOptions.headerRows",
        "resource.dataDiscoverySpec.storageConfig.csvOptions.quote",
        "resource.dataDiscoverySpec.storageConfig.csvOptions.typeInferenceDisabled",
        "resource.dataDiscoverySpec.storageConfig.excludePatterns",
        "resource.dataDiscoverySpec.storageConfig.includePatterns",
        "resource.dataDiscoverySpec.storageConfig.jsonOptions.encoding",
        "resource.dataDiscoverySpec.storageConfig.jsonOptions.typeInferenceDisabled",
        "resource.dataProfileSpec.excludeFields.fieldNames",
        "resource.dataProfileSpec.includeFields.fieldNames",
        "resource.dataProfileSpec.postScanActions.bigqueryExport.resultsTable",
        "resource.dataProfileSpec.rowFilter",
        "resource.dataProfileSpec.samplingPercent",
        "resource.dataQualitySpec.postScanActions.bigqueryExport.resultsTable",
        "resource.dataQualitySpec.postScanActions.notificationReport.recipients.emails",
        "resource.dataQualitySpec.postScanActions.notificationReport.scoreThresholdTrigger.scoreThreshold",
        "resource.dataQualitySpec.rowFilter",
        "resource.dataQualitySpec.rules.column",
        "resource.dataQualitySpec.rules.description",
        "resource.dataQualitySpec.rules.dimension",
        "resource.dataQualitySpec.rules.ignoreNull",
        "resource.dataQualitySpec.rules.name",
        "resource.dataQualitySpec.rules.rangeExpectation.maxValue",
        "resource.dataQualitySpec.rules.rangeExpectation.minValue",
        "resource.dataQualitySpec.rules.rangeExpectation.strictMaxEnabled",
        "resource.dataQualitySpec.rules.rangeExpectation.strictMinEnabled",
        "resource.dataQualitySpec.rules.regexExpectation.regex",
        "resource.dataQualitySpec.rules.rowConditionExpectation.sqlExpression",
        "resource.dataQualitySpec.rules.setExpectation.values",
        "resource.dataQualitySpec.rules.sqlAssertion.sqlStatement",
        "resource.dataQualitySpec.rules.statisticRangeExpectation.maxValue",
        "resource.dataQualitySpec.rules.statisticRangeExpectation.minValue",
        "resource.dataQualitySpec.rules.statisticRangeExpectation.statistic",
        "resource.dataQualitySpec.rules.statisticRangeExpectation.strictMaxEnabled",
        "resource.dataQualitySpec.rules.statisticRangeExpectation.strictMinEnabled",
        "resource.dataQualitySpec.rules.suspended",
        "resource.dataQualitySpec.rules.tableConditionExpectation.sqlExpression",
        "resource.dataQualitySpec.rules.threshold",
        "resource.dataQualitySpec.samplingPercent",
        "resource.description",
        "resource.displayName",
        "resource.executionSpec.field",
        "resource.executionSpec.trigger.schedule.cron",
        "resource.exportSpec.outputPath",
        "resource.exportSpec.scope.aspectTypes",
        "resource.exportSpec.scope.entryGroups",
        "resource.exportSpec.scope.entryTypes",
        "resource.exportSpec.scope.organizationLevel",
        "resource.exportSpec.scope.projects",
        "resource.importSpec.aspectSyncMode",
        "resource.importSpec.entrySyncMode",
        "resource.importSpec.logLevel",
        "resource.importSpec.scope.aspectTypes",
        "resource.importSpec.scope.entryGroups",
        "resource.importSpec.scope.entryTypes",
        "resource.importSpec.sourceCreateTime",
        "resource.importSpec.sourceStorageUri",
        "resource.metadataTemplate.annotations.deprecated",
        "resource.metadataTemplate.annotations.description",
        "resource.metadataTemplate.annotations.displayName",
        "resource.metadataTemplate.annotations.displayOrder",
        "resource.metadataTemplate.annotations.stringType",
        "resource.metadataTemplate.annotations.stringValues",
        "resource.metadataTemplate.constraints.required",
        "resource.metadataTemplate.enumValues.deprecated",
        "resource.metadataTemplate.enumValues.index",
        "resource.metadataTemplate.enumValues.name",
        "resource.metadataTemplate.index",
        "resource.metadataTemplate.name",
        "resource.metadataTemplate.type",
        "resource.metadataTemplate.typeId",
        "resource.metadataTemplate.typeRef",
        "resource.platform",
        "resource.requiredAspects.type",
        "resource.system",
        "resource.type",
        "resource.typeAliases"
      ]
    },
    {
      "service": "Dataproc",
      "resource_type": "dataproc.googleapis.com/Cluster",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/dataproc/docs/concepts/dataproc-custom-constraints",
      "fields": [
        "resource.config.autoscalingConfig.policyUri",
        "resource.config.encryptionConfig.gcePdKmsKeyName",
        "resource.config.endpointConfig.enableHttpPortAccess",
        "resource.config.gceClusterConfig.internalIpOnly",
        "resource.config.gceClusterConfig.metadata",
        "resource.config.gceClusterConfig.networkUri",
        "resource.config.gceClusterConfig.serviceAccount",
        "resource.config.initializationActions.executableFile",
        "resource.config.masterConfig.diskConfig.bootDiskSizeGb",
        "resource.config.masterConfig.diskConfig.bootDiskType",
        "resource.config.masterConfig.diskConfig.localSsdInterface",
        "resource.config.masterConfig.diskConfig.numLocalSsds",
        "resource.config.masterConfig.imageUri",
        "resource.config.masterConfig.machineTypeUri",
        "resource.config.masterConfig.numInstances",
        "resource.config.metastoreConfig.dataprocMetastoreService",
        "resource.config.secondaryWorkerConfig.diskConfig.bootDiskSizeGb",
        "resource.config.secondaryWorkerConfig.diskConfig.bootDiskType",
        "resource.config.secondaryWorkerConfig.diskConfig.localSsdInterface",
        "resource.config.secondaryWorkerConfig.diskConfig.numLocalSsds",
        "resource.config.secondaryWorkerConfig.imageUri",
        "resource.config.secondaryWorkerConfig.machineTypeUri",
        "resource.config.secondaryWorkerConfig.numInstances",
        "resource.config.securityConfig.kerberosConfig.crossRealmTrustKdc",
        "resource.config.securityConfig.kerberosConfig.enableKerberos",
        "resource.config.softwareConfig.imageVersion",
        "resource.config.softwareConfig.optionalComponents",
        "resource.config.softwareConfig.properties",
        "resource.config.workerConfig.diskConfig.bootDiskSizeGb",
        "resource.config.workerConfig.diskConfig.bootDiskType",
        "resource.config.workerConfig.diskConfig.localSsdInterface",
        "resource.config.workerConfig.diskConfig.numLocalSsds",
        "resource.config.workerConfig.imageUri",
        "resource.config.workerConfig.machineTypeUri",
        "resource.config.workerConfig.numInstances",
        "resource.labels"
      ]
    },
    {
      "service": "Dataproc Metastore",
      "resource_type": "metastore.googleapis.com/Backup",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/dataproc-metastore/docs/org-policy-custom-constraints",
      "fields": [
        "resource.databaseDump.gcsUri",
        "resource.databaseDump.sourceDatabase",
        "resource.databaseDump.type",
        "resource.databaseType",
        "resource.deletionProtection",
        "resource.description",
        "resource.encryptionConfig.kmsKey",
        "resource.hiveMetastoreConfig.auxiliaryVersions[*].configOverrides",
        "resource.hiveMetastoreConfig.auxiliaryVersions[*].version",
        "resource.hiveMetastoreConfig.configOverrides",
        "resource.hiveMetastoreConfig.endpointProtocol",
        "resource.hiveMetastoreConfig.kerberosConfig.keytab.cloudSecret",
        "resource.hiveMetastoreConfig.kerberosConfig.krb5ConfigGcsUri",
        "resource.hiveMetastoreConfig.kerberosConfig.principal",
        "resource.hiveMetastoreConfig.version",
        "resource.maintenanceWindow.dayOfWeek",
        "resource.maintenanceWindow.hourOfDay",
        "resource.metadataIntegration.dataCatalogConfig.enabled",
        "resource.name",
        "resource.network",
        "resource.networkConfig.consumers.subnetwork",
        "resource.port",
        "resource.releaseChannel",
        "resource.scalingConfig.autoscalingConfig.autoscalingEnabled",
        "resource.scalingConfig.autoscalingConfig.limitConfig.maxScalingFactor",
        "resource.scalingConfig.autoscalingConfig.limitConfig.minScalingFactor",
        "resource.scalingConfig.instanceSize",
        "resource.scalingConfig.scalingFactor",
        "resource.scheduledBackup.backupLocation",
        "resource.scheduledBackup.cronSchedule",
        "resource.scheduledBackup.enabled",
        "resource.scheduledBackup.timeZone",
        "resource.telemetryConfig.logFormat",
        "resource.tier"
      ]
    },
    {
      "service": "Dataproc Serverless",
      "resource_type": "dataproc.googleapis.com/Batch",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/dataproc-serverless/docs/guides/dataproc-serverless-custom-constraints",
      "fields": [
        "resource.environmentConfig.executionConfig.authenticationConfig.userWorkloadAuthenticationType",
        "resource.environmentConfig.executionConfig.idleTtl",
        "resource.environmentConfig.executionConfig.kmsKey",
        "resource.environmentConfig.executionConfig.networkTags",
        "resource.environmentConfig.executionConfig.networkUri",
        "resource.environmentConfig.executionConfig.serviceAccount",
        "resource.environmentConfig.executionConfig.stagingBucket",
        "resource.environmentConfig.executionConfig.subnetworkUri",
        "resource.environmentConfig.executionConfig.ttl",
        "resource.environmentConfig.peripheralsConfig.metastoreService",
        "resource.environmentConfig.peripheralsConfig.sparkHistoryServerConfig.dataprocCluster",
        "resource.jupyterSession.displayName",
        "resource.jupyterSession.kernel",
        "resource.labels",
        "resource.name",
        "resource.pysparkBatch.archiveUris",
        "resource.pysparkBatch.args",
        "resource.pysparkBatch.fileUris",
        "resource.pysparkBatch.jarFileUris",
        "resource.pysparkBatch.mainPythonFileUri",
        "resource.pysparkBatch.pythonFileUris",
        "resource.runtimeConfig.autotuningConfig.scenarios",
        "resource.runtimeConfig.cohort",
        "resource.runtimeConfig.containerImage",
        "resource.runtimeConfig.properties",
        "resource.runtimeConfig.repositoryConfig.pypiRepositoryConfig.pypiRepository",
        "resource.runtimeConfig.version",
        "resource.sessionTemplate",
        "resource.sparkBatch.archiveUris",
        "resource.sparkBatch.args",
        "resource.sparkBatch.fileUris",
        "resource.sparkBatch.jarFileUris",
        "resource.sparkBatch.mainClass",
        "resource.sparkBatch.mainJarFileUri",
        "resource.sparkConnectSession",
        "resource.sparkRBatch.archiveUris",
        "resource.sparkRBatch.args",
        "resource.sparkRBatch.fileUris",
        "resource.sparkRBatch.mainRFileUri",
        "resource.sparkSqlBatch.jarFileUris",
        "resource.sparkSqlBatch.queryFileUri",
        "resource.sparkSqlBatch.queryVariables",
        "resource.user"
      ]
    },
    {
      "service": "Developer Connect",
      "resource_type": "developerconnect.googleapis.com/Connection",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/developer-connect/docs/custom-constraints",
      "fields": []
    },
    {
      "service": "Cloud DNS",
      "resource_type": "dns.googleapis.com/ManagedZone",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/dns/docs/create-custom-constraints",
      "fields": [
        "resource.alternativeNameServerConfig.targetNameServers.forwardingPath",
        "resource.alternativeNameServerConfig.targetNameServers.ipv4Address",
        "resource.alternativeNameServerConfig.targetNameServers.ipv6Address",
        "resource.behavior",
        "resource.cloudLoggingConfig.enableLogging",
        "resource.description",
        "resource.dns64Config.scope.allQueries",
        "resource.dnsName",
        "resource.dnssecConfig.defaultKeySpecs.algorithm",
        "resource.dnssecConfig.defaultKeySpecs.keyLength",
        "resource.dnssecConfig.defaultKeySpecs.keyType",
        "resource.dnssecConfig.nonExistence",
        "resource.dnssecConfig.state",
        "resource.enableInboundForwarding",
        "resource.enableLogging",
        "resource.forwardingConfig.targetNameServers.domainName",
        "resource.forwardingConfig.targetNameServers.forwardingPath",
        "resource.forwardingConfig.targetNameServers.ipv4Address",
        "resource.forwardingConfig.targetNameServers.ipv6Address",
        "resource.gkeClusters.gkeClusterName",
        "resource.localData.localData.name",
        "resource.localData.localData.routingPolicy.geo.enableFencing",
        "resource.localData.localData.routingPolicy.geo.item.healthCheckedTargets.externalEndpoints",
        "resource.localData.localData.routingPolicy.geo.item.healthCheckedTargets.internalLoadBalancer.ipAddress",
        "resource.localData.localData.routingPolicy.geo.item.healthCheckedTargets.internalLoadBalancer.ipProtocol",
        "resource.localData.localData.routingPolicy.geo.item.healthCheckedTargets.internalLoadBalancer.loadBalancerType",
        "resource.localData.localData.routingPolicy.geo.item.healthCheckedTargets.internalLoadBalancer.networkUrl",
        "resource.localData.localData.routingPolicy.geo.item.healthCheckedTargets.internalLoadBalancer.port",
        "resource.localData.localData.routingPolicy.geo.item.healthCheckedTargets.internalLoadBalancer.project",
        "resource.localData.localData.routingPolicy.geo.item.healthCheckedTargets.internalLoadBalancer.region",
        "resource.localData.localData.routingPolicy.geo.item.location",
        "resource.localData.localData.routingPolicy.geo.item.rrdata",
        "resource.localData.localData.routingPolicy.healthCheck",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.enableFencing",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.healthCheckedTargets.externalEndpoints",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.healthCheckedTargets.internalLoadBalancer.ipAddress",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.healthCheckedTargets.internalLoadBalancer.ipProtocol",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.healthCheckedTargets.internalLoadBalancer.loadBalancerType",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.healthCheckedTargets.internalLoadBalancer.networkUrl",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.healthCheckedTargets.internalLoadBalancer.port",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.healthCheckedTargets.internalLoadBalancer.project",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.healthCheckedTargets.internalLoadBalancer.region",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.location",
        "resource.localData.localData.routingPolicy.primaryBackup.backupGeoTargets.item.rrdata",
        "resource.localData.localData.routingPolicy.primaryBackup.primaryTargets.externalEndpoints",
        "resource.localData.localData.routingPolicy.primaryBackup.primaryTargets.internalLoadBalancer.ipAddress",
        "resource.localData.localData.routingPolicy.primaryBackup.primaryTargets.internalLoadBalancer.ipProtocol",
        "resource.localData.localData.routingPolicy.primaryBackup.primaryTargets.internalLoadBalancer.loadBalancerType",
        "resource.localData.localData.routingPolicy.primaryBackup.primaryTargets.internalLoadBalancer.networkUrl",
        "resource.localData.localData.routingPolicy.primaryBackup.primaryTargets.internalLoadBalancer.port",
        "resource.localData.localData.routingPolicy.primaryBackup.primaryTargets.internalLoadBalancer.project",
        "resource.localData.localData.routingPolicy.primaryBackup.primaryTargets.internalLoadBalancer.region",
        "resource.localData.localData.routingPolicy.primaryBackup.trickleTraffic",
        "resource.localData.localData.routingPolicy.wrr.item.healthCheckedTargets.externalEndpoints",
        "resource.localData.localData.routingPolicy.wrr.item.healthCheckedTargets.internalLoadBalancer.ipAddress",
        "resource.localData.localData.routingPolicy.wrr.item.healthCheckedTargets.internalLoadBalancer.ipProtocol",
        "resource.localData.localData.routingPolicy.wrr.item.healthCheckedTargets.internalLoadBalancer.loadBalancerType",
        "resource.localData.localData.routingPolicy.wrr.item.healthCheckedTargets.internalLoadBalancer.networkUrl",
        "resource.localData.localData.routingPolicy.wrr.item.healthCheckedTargets.internalLoadBalancer.port",
        "resource.localData.localData.routingPolicy.wrr.item.healthCheckedTargets.internalLoadBalancer.project",
        "resource.localData.localData.routingPolicy.wrr.item.healthCheckedTargets.internalLoadBalancer.region",
        "resource.localData.localData.routingPolicy.wrr.item.rrdata",
        "resource.localData.localData.routingPolicy.wrr.item.weight",
        "resource.localData.localData.rrdata",
        "resource.localData.localData.ttl",
        "resource.localData.localData.type",
        "resource.name",
        "resource.networks.networkUrl",
        "resource.privateVisibilityConfig.gkeClusters.gkeClusterName",
        "resource.privateVisibilityConfig.networks.networkUrl",
        "resource.responsePolicyName",
        "resource.ruleName",
        "resource.serviceDirectoryConfig.namespace.namespaceUrl",
        "resource.visibility"
      ]
    },
    {
      "service": "Essential Contacts",
      "resource_type": "essentialcontacts.googleapis.com/Contact",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/resource-manager/docs/essentialcontacts-custom-org-policies",
      "fields": [
        "resource.email",
        "resource.languageTag",
        "resource.notificationCategorySubscriptions"
      ]
    },
    {
      "service": "Eventarc",
      "resource_type": "eventarc.googleapis.com/Channel",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/eventarc/standard/docs/custom-constraints",
      "fields": [
        "resource.activationToken",
        "resource.annotations",
        "resource.celMatch",
        "resource.channel",
        "resource.cryptoKeyName",
        "resource.destination",
        "resource.destination.cloudFunction",
        "resource.destination.cloudRun.path",
        "resource.destination.cloudRun.region",
        "resource.destination.cloudRun.service",
        "resource.destination.gke.cluster",
        "resource.destination.gke.location",
        "resource.destination.gke.namespace",
        "resource.destination.gke.path",
        "resource.destination.gke.service",
        "resource.destination.httpEndpoint.uri",
        "resource.destination.networkConfig.networkAttachment",
        "resource.destination.workflow",
        "resource.destinations.authenticationConfig.googleOidc.audience",
        "resource.destinations.authenticationConfig.googleOidc.serviceAccount",
        "resource.destinations.authenticationConfig.oauthToken.scope",
        "resource.destinations.authenticationConfig.oauthToken.serviceAccount",
        "resource.destinations.httpEndpoint.messageBindingTemplate",
        "resource.destinations.httpEndpoint.uri",
        "resource.destinations.messageBus",
        "resource.destinations.networkConfig.networkAttachment",
        "resource.destinations.outputPayloadFormat.avro.schemaDefinition",
        "resource.destinations.outputPayloadFormat.protobuf.schemaDefinition",
        "resource.destinations.topic",
        "resource.destinations.workflow",
        "resource.displayName",
        "resource.eventDataContentType",
        "resource.eventFilters.attribute",
        "resource.eventFilters.operator",
        "resource.eventFilters.value",
        "resource.inputPayloadFormat.avro.schemaDefinition",
        "resource.inputPayloadFormat.protobuf.schemaDefinition",
        "resource.loggingConfig.logSeverity",
        "resource.mediations.transformation.transformationTemplate",
        "resource.messageBus",
        "resource.name",
        "resource.provider",
        "resource.retryPolicy.maxAttempts",
        "resource.retryPolicy.maxRetryDelay",
        "resource.retryPolicy.minRetryDelay",
        "resource.serviceAccount",
        "resource.transport.pubsub.topic"
      ]
    },
    {
      "service": "Filestore",
      "resource_type": "file.googleapis.com/Backup",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/filestore/docs/create-custom-constraints",
      "fields": [
        "resource.deletionProtectionEnabled",
        "resource.deletionProtectionReason",
        "resource.description",
        "resource.fileShares.capacityGb",
        "resource.fileShares.name",
        "resource.fileShares.nfsExportOptions.accessMode",
        "resource.fileShares.nfsExportOptions.anonGid",
        "resource.fileShares.nfsExportOptions.anonUid",
        "resource.fileShares.nfsExportOptions.ipRanges",
        "resource.fileShares.nfsExportOptions.squashMode",
        "resource.fileShares.sourceBackup",
        "resource.kmsKey",
        "resource.kmsKeyName",
        "resource.networks.connectMode",
        "resource.networks.modes",
        "resource.networks.network",
        "resource.networks.reservedIpRange",
        "resource.performanceConfig.fixedIops.maxIops",
        "resource.performanceConfig.iopsPerTb.maxIopsPerTb",
        "resource.protocol",
        "resource.replication.replicas.peerInstance",
        "resource.replication.role",
        "resource.sourceFileShare",
        "resource.sourceInstance",
        "resource.tier"
      ]
    },
    {
      "service": "Firestore",
      "resource_type": "firestore.googleapis.com/Database",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/firestore/docs/custom-constraints",
      "fields": [
        "resource.appEngineIntegrationMode",
        "resource.cmekConfig.kmsKeyName",
        "resource.concurrencyMode",
        "resource.deleteProtectionState",
        "resource.locationId",
        "resource.name",
        "resource.pointInTimeRecoveryEnablement",
        "resource.type"
      ]
    },
    {
      "service": "Cloud Next Generation Firewall",
      "resource_type": "compute.googleapis.com/Firewall",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/firewall/docs/custom-constraints",
      "fields": [
        "resource.allowed",
        "resource.allowed[]",
        "resource.allowed[].IPProtocol",
        "resource.allowed[].ports[]",
        "resource.denied[]",
        "resource.denied[].IPProtocol",
        "resource.denied[].ports[]",
        "resource.description",
        "resource.destinationRanges[]",
        "resource.direction",
        "resource.disabled",
        "resource.name",
        "resource.network",
        "resource.priority",
        "resource.sourceRanges[]",
        "resource.sourceTags[]",
        "resource.targetTags[]"
      ]
    },
    {
      "service": "GKE attached clusters",
      "resource_type": "gkemulticloud.googleapis.com/AttachedCluster",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/kubernetes-engine/multi-cloud/docs/attached/eks/how-to/setup-custom-constraints",
      "fields": []
    },
    {
      "service": "GKE on AWS",
      "resource_type": "gkemulticloud.googleapis.com/AwsCluster",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/kubernetes-engine/multi-cloud/docs/aws/how-to/setup-custom-constraints",
      "fields": []
    },
    {
      "service": "GKE on Azure",
      "resource_type": "gkemulticloud.googleapis.com/AzureClient",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/kubernetes-engine/multi-cloud/docs/azure/how-to/setup-custom-constraints",
      "fields": []
    },
    {
      "service": "GKE",
      "resource_type": "container.googleapis.com/Cluster",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/kubernetes-engine/docs/how-to/custom-org-policies",
      "fields": []
    },
    {
      "service": "GKE On-Prem API",
      "resource_type": "gkeonprem.googleapis.com/BareMetalAdminCluster",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/kubernetes-engine/distributed-cloud/reference/custom-constraints",
      "fields": [
        "resource.addonNode.autoResizeConfig.enabled",
        "resource.adminClusterMembership",
        "resource.annotations",
        "resource.antiAffinityGroups.aagConfigDisabled",
        "resource.authorization.adminUsers.username",
        "resource.authorization.viewerUsers.username",
        "resource.autoRepairConfig.enabled",
        "resource.bareMetalVersion",
        "resource.binaryAuthorization.evaluationMode",
        "resource.bootstrapClusterMembership",
        "resource.clusterOperations.enableApplicationLogs",
        "resource.config.bootDiskSizeGb",
        "resource.config.cpus",
        "resource.config.enableLoadBalancer",
        "resource.config.image",
        "resource.config.imageType",
        "resource.config.memoryMb",
        "resource.config.replicas",
        "resource.config.taints.effect",
        "resource.config.taints.key",
        "resource.config.taints.value",
        "resource.config.vsphereConfig.datastore",
        "resource.config.vsphereConfig.hostGroups",
        "resource.config.vsphereConfig.tags.category",
        "resource.config.vsphereConfig.tags.tag",
        "resource.controlPlane.apiServerArgs.argument",
        "resource.controlPlane.apiServerArgs.value",
        "resource.controlPlane.controlPlaneNodePoolConfig.nodePoolConfig.kubeletConfig.registryBurst",
        "resource.controlPlane.controlPlaneNodePoolConfig.nodePoolConfig.kubeletConfig.registryPullQps",
        "resource.controlPlane.controlPlaneNodePoolConfig.nodePoolConfig.kubeletConfig.serializeImagePullsDisabled",
        "resource.controlPlane.controlPlaneNodePoolConfig.nodePoolConfig.nodeConfigs.nodeIp",
        "resource.controlPlane.controlPlaneNodePoolConfig.nodePoolConfig.operatingSystem",
        "resource.controlPlane.controlPlaneNodePoolConfig.nodePoolConfig.taints.effect",
        "resource.controlPlane.controlPlaneNodePoolConfig.nodePoolConfig.taints.key",
        "resource.controlPlane.controlPlaneNodePoolConfig.nodePoolConfig.taints.value",
        "resource.controlPlaneNode.autoResizeConfig.enabled",
        "resource.controlPlaneNode.cpus",
        "resource.controlPlaneNode.memory",
        "resource.controlPlaneNode.replicas",
        "resource.controlPlaneNode.vsphereConfig.datastore",
        "resource.controlPlaneNode.vsphereConfig.storagePolicyName",
        "resource.dataplaneV2.advancedNetworking",
        "resource.dataplaneV2.dataplaneV2Enabled",
        "resource.dataplaneV2.forwardMode",
        "resource.dataplaneV2.windowsDataplaneV2Enabled",
        "resource.description",
        "resource.disableBundledIngress",
        "resource.displayName",
        "resource.enableAdvancedCluster",
        "resource.enableControlPlaneV2",
        "resource.imageType",
        "resource.loadBalancer.bgpLbConfig.addressPools.addresses",
        "resource.loadBalancer.bgpLbConfig.addressPools.avoidBuggyIps",
        "resource.loadBalancer.bgpLbConfig.addressPools.manualAssign",
        "resource.loadBalancer.bgpLbConfig.addressPools.pool",
        "resource.loadBalancer.bgpLbConfig.asn",
        "resource.loadBalancer.bgpLbConfig.bgpPeerConfigs.asn",
        "resource.loadBalancer.bgpLbConfig.bgpPeerConfigs.controlPlaneNodes",
        "resource.loadBalancer.bgpLbConfig.bgpPeerConfigs.ipAddress",
        "resource.loadBalancer.bgpLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.kubeletConfig.registryBurst",
        "resource.loadBalancer.bgpLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.kubeletConfig.registryPullQps",
        "resource.loadBalancer.bgpLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.kubeletConfig.serializeImagePullsDisabled",
        "resource.loadBalancer.bgpLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.nodeConfigs.nodeIp",
        "resource.loadBalancer.bgpLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.operatingSystem",
        "resource.loadBalancer.bgpLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.taints.effect",
        "resource.loadBalancer.bgpLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.taints.key",
        "resource.loadBalancer.bgpLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.taints.value",
        "resource.loadBalancer.f5Config.address",
        "resource.loadBalancer.f5Config.partition",
        "resource.loadBalancer.f5Config.snatPool",
        "resource.loadBalancer.manualLbConfig.addonsNodePort",
        "resource.loadBalancer.manualLbConfig.controlPlaneNodePort",
        "resource.loadBalancer.manualLbConfig.enabled",
        "resource.loadBalancer.manualLbConfig.ingressHttpNodePort",
        "resource.loadBalancer.manualLbConfig.ingressHttpsNodePort",
        "resource.loadBalancer.manualLbConfig.konnectivityServerNodePort",
        "resource.loadBalancer.metalLbConfig.addressPools.addresses",
        "resource.loadBalancer.metalLbConfig.addressPools.avoidBuggyIps",
        "resource.loadBalancer.metalLbConfig.addressPools.manualAssign",
        "resource.loadBalancer.metalLbConfig.addressPools.pool",
        "resource.loadBalancer.metalLbConfig.enabled",
        "resource.loadBalancer.metalLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.kubeletConfig.registryBurst",
        "resource.loadBalancer.metalLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.kubeletConfig.registryPullQps",
        "resource.loadBalancer.metalLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.kubeletConfig.serializeImagePullsDisabled",
        "resource.loadBalancer.metalLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.nodeConfigs.nodeIp",
        "resource.loadBalancer.metalLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.operatingSystem",
        "resource.loadBalancer.metalLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.taints.effect",
        "resource.loadBalancer.metalLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.taints.key",
        "resource.loadBalancer.metalLbConfig.loadBalancerNodePoolConfig.nodePoolConfig.taints.value",
        "resource.loadBalancer.portConfig.controlPlaneLoadBalancerPort",
        "resource.loadBalancer.vipConfig.addonsVip",
        "resource.loadBalancer.vipConfig.controlPlaneVip",
        "resource.loadBalancer.vipConfig.ingressVip",
        "resource.maintenanceConfig.maintenanceAddressCidrBlocks",
        "resource.name",
        "resource.networkConfig.advancedNetworking",
        "resource.networkConfig.controlPlaneV2Config.controlPlaneIpBlock.gateway",
        "resource.networkConfig.controlPlaneV2Config.controlPlaneIpBlock.ips.hostname",
        "resource.networkConfig.controlPlaneV2Config.controlPlaneIpBlock.ips.ip",
        "resource.networkConfig.controlPlaneV2Config.controlPlaneIpBlock.netmask",
        "resource.networkConfig.dhcpIpConfig.enabled",
        "resource.networkConfig.haControlPlaneConfig.controlPlaneIpBlock.gateway",
        "resource.networkConfig.haControlPlaneConfig.controlPlaneIpBlock.ips.hostname",
        "resource.networkConfig.haControlPlaneConfig.controlPlaneIpBlock.ips.ip",
        "resource.networkConfig.haControlPlaneConfig.controlPlaneIpBlock.netmask",
        "resource.networkConfig.hostConfig.dnsSearchDomains",
        "resource.networkConfig.hostConfig.dnsServers",
        "resource.networkConfig.hostConfig.ntpServers",
        "resource.networkConfig.islandModeCidr.podAddressCidrBlocks",
        "resource.networkConfig.islandModeCidr.serviceAddressCidrBlocks",
        "resource.networkConfig.multipleNetworkInterfacesConfig.enabled",
        "resource.networkConfig.podAddressCidrBlocks",
        "resource.networkConfig.serviceAddressCidrBlocks",
        "resource.networkConfig.srIovConfig.enabled",
        "resource.networkConfig.staticIpConfig.ipBlocks.gateway",
        "resource.networkConfig.staticIpConfig.ipBlocks.ips.hostname",
        "resource.networkConfig.staticIpConfig.ipBlocks.ips.ip",
        "resource.networkConfig.staticIpConfig.ipBlocks.netmask",
        "resource.networkConfig.vcenterNetwork",
        "resource.nodeAccessConfig.loginUser",
        "resource.nodeConfig.containerRuntime",
        "resource.nodeConfig.maxPodsPerNode",
        "resource.nodePoolAutoscaling.maxReplicas",
        "resource.nodePoolAutoscaling.minReplicas",
        "resource.nodePoolConfig.kubeletConfig.registryBurst",
        "resource.nodePoolConfig.kubeletConfig.registryPullQps",
        "resource.nodePoolConfig.kubeletConfig.serializeImagePullsDisabled",
        "resource.nodePoolConfig.nodeConfigs.nodeIp",
        "resource.nodePoolConfig.operatingSystem",
        "resource.nodePoolConfig.taints.effect",
        "resource.nodePoolConfig.taints.key",
        "resource.nodePoolConfig.taints.value",
        "resource.onPremVersion",
        "resource.osEnvironmentConfig.packageRepoExcluded",
        "resource.platformConfig.requiredPlatformVersion",
        "resource.proxy.noProxy",
        "resource.proxy.uri",
        "resource.securityConfig.authorization.adminUsers.username",
        "resource.storage.lvpNodeMountsConfig.path",
        "resource.storage.lvpNodeMountsConfig.storageClass",
        "resource.storage.lvpShareConfig.lvpConfig.path",
        "resource.storage.lvpShareConfig.lvpConfig.storageClass",
        "resource.storage.lvpShareConfig.sharedPathPvCount",
        "resource.storage.vsphereCsiDisabled",
        "resource.upgradePolicy.controlPlaneOnly",
        "resource.upgradePolicy.parallelUpgradeConfig.concurrentNodes",
        "resource.upgradePolicy.parallelUpgradeConfig.minimumAvailableNodes",
        "resource.upgradePolicy.policy",
        "resource.vcenter.address",
        "resource.vcenter.caCertData",
        "resource.vcenter.cluster",
        "resource.vcenter.dataDisk",
        "resource.vcenter.datacenter",
        "resource.vcenter.datastore",
        "resource.vcenter.folder",
        "resource.vcenter.resourcePool",
        "resource.vcenter.storagePolicyName",
        "resource.vmTrackingEnabled"
      ]
    },
    {
      "service": "Cloud Healthcare API",
      "resource_type": "healthcare.googleapis.com/ConsentStore",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/healthcare-api/docs/custom-org-policy",
      "fields": [
        "resource.bulkExportGcsDestination.uriPrefix",
        "resource.complexDataTypeReferenceParsing",
        "resource.consentConfig.accessDeterminationLogConfig.logLevel",
        "resource.consentConfig.accessEnforced",
        "resource.consentConfig.consentHeaderHandling.profile",
        "resource.consentConfig.version",
        "resource.defaultConsentTtl",
        "resource.defaultSearchHandlingStrict",
        "resource.disableReferentialIntegrity",
        "resource.disableResourceVersioning",
        "resource.enableConsentCreateOnUpdate",
        "resource.enableHistoryModifications",
        "resource.enableUpdateCreate",
        "resource.encryptionSpec.kmsKeyName",
        "resource.name",
        "resource.notificationConfig.pubsubTopic",
        "resource.notificationConfig.sendForBulkImport",
        "resource.notificationConfigs.filter",
        "resource.notificationConfigs.pubsubTopic",
        "resource.notificationConfigs.sendFullResource",
        "resource.notificationConfigs.sendPreviousResourceOnDelete",
        "resource.parserConfig.allowNullHeader",
        "resource.parserConfig.schema.ignoreMinOccurs",
        "resource.parserConfig.schema.schemas.version.mshField",
        "resource.parserConfig.schema.schemas.version.value",
        "resource.parserConfig.schema.schematizedParsingType",
        "resource.parserConfig.schema.types.type.fields.maxOccurs",
        "resource.parserConfig.schema.types.type.fields.minOccurs",
        "resource.parserConfig.schema.types.type.fields.name",
        "resource.parserConfig.schema.types.type.fields.table",
        "resource.parserConfig.schema.types.type.fields.type",
        "resource.parserConfig.schema.types.type.name",
        "resource.parserConfig.schema.types.type.primitive",
        "resource.parserConfig.schema.types.version.mshField",
        "resource.parserConfig.schema.types.version.value",
        "resource.parserConfig.schema.unexpectedFieldHandling",
        "resource.parserConfig.schema.unexpectedSegmentHandling",
        "resource.parserConfig.segmentTerminator",
        "resource.parserConfig.version",
        "resource.rejectDuplicateMessage",
        "resource.streamConfigs.bigqueryDestination.datasetUri",
        "resource.streamConfigs.bigqueryDestination.force",
        "resource.streamConfigs.bigqueryDestination.schemaConfig.lastUpdatedPartitionConfig.expirationMs",
        "resource.streamConfigs.bigqueryDestination.schemaConfig.lastUpdatedPartitionConfig.type",
        "resource.streamConfigs.bigqueryDestination.schemaConfig.recursiveStructureDepth",
        "resource.streamConfigs.bigqueryDestination.schemaConfig.schemaType",
        "resource.streamConfigs.bigqueryDestination.tableUri",
        "resource.streamConfigs.bigqueryDestination.writeDisposition",
        "resource.streamConfigs.deidentifiedStoreDestination.config.dicom.filterProfile",
        "resource.streamConfigs.deidentifiedStoreDestination.config.dicom.keepList.tags",
        "resource.streamConfigs.deidentifiedStoreDestination.config.dicom.removeList.tags",
        "resource.streamConfigs.deidentifiedStoreDestination.config.dicom.skipIdRedaction",
        "resource.streamConfigs.deidentifiedStoreDestination.config.fhir.defaultKeepExtensions",
        "resource.streamConfigs.deidentifiedStoreDestination.config.fhir.fieldMetadataList.action",
        "resource.streamConfigs.deidentifiedStoreDestination.config.fhir.fieldMetadataList.paths",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.additionalInfoTypes",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.action",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.modality",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.pixelBox.height",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.pixelBox.left",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.pixelBox.top",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.pixelBox.width",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.relativeBox.relativeHeight",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.relativeBox.relativeLeft",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.relativeBox.relativeTop",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.areasOfInterest.relativeBox.relativeWidth",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.excludeInfoTypes",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.minLikelihood",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.textRedactionMode",
        "resource.streamConfigs.deidentifiedStoreDestination.config.image.useBurnedInAnnotationAttribute",
        "resource.streamConfigs.deidentifiedStoreDestination.config.text.additionalTransformations.characterMaskConfig.maskingCharacter",
        "resource.streamConfigs.deidentifiedStoreDestination.config.text.additionalTransformations.infoTypes",
        "resource.streamConfigs.deidentifiedStoreDestination.config.text.excludeInfoTypes",
        "resource.streamConfigs.deidentifiedStoreDestination.config.text.transformations.characterMaskConfig.maskingCharacter",
        "resource.streamConfigs.deidentifiedStoreDestination.config.text.transformations.infoTypes",
        "resource.streamConfigs.deidentifiedStoreDestination.config.useRegionalDataProcessing",
        "resource.streamConfigs.deidentifiedStoreDestination.store",
        "resource.streamConfigs.resourceTypes",
        "resource.timeZone",
        "resource.validationConfig.disableFhirpathValidation",
        "resource.validationConfig.disableProfileValidation",
        "resource.validationConfig.disableReferenceTypeValidation",
        "resource.validationConfig.disableRequiredFieldValidation",
        "resource.validationConfig.enabledImplementationGuides",
        "resource.version"
      ]
    },
    {
      "service": "Hub",
      "resource_type": "gkehub.googleapis.com/Feature",
      "launch_status": "GA",
      "doc_url": null,
      "fields": []
    },
    {
      "service": "Identity and Access Management",
      "resource_type": "iam.googleapis.com/AllowPolicy",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/iam/docs/org-policy-custom-constraints",
      "fields": [
        "resource.bindings",
        "resource.bindings.exists(binding,"
      ]
    },
    {
      "service": "Identity-Aware Proxy",
      "resource_type": "iap.googleapis.com/TunnelDestGroup",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/iap/docs/custom-org-policies",
      "fields": [
        "resource.cidrs",
        "resource.fqdns",
        "resource.name"
      ]
    },
    {
      "service": "Cloud Interconnect",
      "resource_type": "compute.googleapis.com/Interconnect",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/network-connectivity/docs/interconnect/how-to/custom-constraints",
      "fields": [
        "resource.adminEnabled",
        "resource.bandwidth",
        "resource.candidateSubnets",
        "resource.customerName",
        "resource.description",
        "resource.edgeAvailabilityDomain",
        "resource.encryption",
        "resource.interconnectType",
        "resource.ipsecInternalAddresses",
        "resource.linkType",
        "resource.location",
        "resource.macsec.failOpen",
        "resource.macsec.preSharedKeys.name",
        "resource.macsec.preSharedKeys.startTime",
        "resource.macsecEnabled",
        "resource.mtu",
        "resource.name",
        "resource.nocContactEmail",
        "resource.remoteLocation",
        "resource.requestedFeatures",
        "resource.requestedLinkCount",
        "resource.router",
        "resource.stackType",
        "resource.subnetLength",
        "resource.type",
        "resource.vlanTag8021q"
      ]
    },
    {
      "service": "Cloud Key Management Service",
      "resource_type": "cloudkms.googleapis.com/AutokeyConfig",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/kms/docs/custom-org-policies",
      "fields": [
        "resource.cryptoKeyBackend",
        "resource.cryptoSpacePath",
        "resource.defaultEkmConnection",
        "resource.destroyScheduledDuration",
        "resource.externalProtectionLevelOptions.ekmConnectionKeyPath",
        "resource.externalProtectionLevelOptions.externalKeyUri",
        "resource.importMethod",
        "resource.importOnly",
        "resource.keyAccessJustificationsPolicy.allowedAccessReasons",
        "resource.keyManagementMode",
        "resource.keyProject",
        "resource.name",
        "resource.nextRotationTime",
        "resource.protectionLevel",
        "resource.purpose",
        "resource.resourceTypeSelector",
        "resource.rotationPeriod",
        "resource.serviceResolvers.endpointFilter",
        "resource.serviceResolvers.hostname",
        "resource.serviceResolvers.serverCertificates.rawDer",
        "resource.serviceResolvers.serviceDirectoryService",
        "resource.state",
        "resource.versionTemplate.algorithm",
        "resource.versionTemplate.protectionLevel"
      ]
    },
    {
      "service": "Cloud Load Balancing",
      "resource_type": "compute.googleapis.com/BackendBucket",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/load-balancing/docs/custom-constraints",
      "fields": [
        "resource.IPProtocol",
        "resource.affinityCookieTtlSec",
        "resource.allPorts",
        "resource.allowGlobalAccess",
        "resource.allowPscGlobalAccess",
        "resource.annotations",
        "resource.appEngine.service",
        "resource.appEngine.urlMask",
        "resource.appEngine.version",
        "resource.autoCapacityDrain.enable",
        "resource.backends",
        "resource.backends.balancingMode",
        "resource.backends.capacityScaler",
        "resource.backends.description",
        "resource.backends.failover",
        "resource.backends.maxConnections",
        "resource.backends.maxConnectionsPerEndpoint",
        "resource.backends.maxConnectionsPerInstance",
        "resource.backends.maxRate",
        "resource.backends.maxRatePerEndpoint",
        "resource.backends.maxRatePerInstance",
        "resource.backends.maxUtilization",
        "resource.backends.preference",
        "resource.bucketName",
        "resource.cdnPolicy",
        "resource.cdnPolicy.bypassCacheOnRequestHeaders",
        "resource.cdnPolicy.bypassCacheOnRequestHeaders.headerName",
        "resource.cdnPolicy.cacheKeyPolicy",
        "resource.cdnPolicy.cacheKeyPolicy.includeHost",
        "resource.cdnPolicy.cacheKeyPolicy.includeHttpHeaders",
        "resource.cdnPolicy.cacheKeyPolicy.includeNamedCookies",
        "resource.cdnPolicy.cacheKeyPolicy.includeProtocol",
        "resource.cdnPolicy.cacheKeyPolicy.includeQueryString",
        "resource.cdnPolicy.cacheKeyPolicy.queryStringBlacklist",
        "resource.cdnPolicy.cacheKeyPolicy.queryStringWhitelist",
        "resource.cdnPolicy.cacheMode",
        "resource.cdnPolicy.clientTtl",
        "resource.cdnPolicy.defaultTtl",
        "resource.cdnPolicy.maxTtl",
        "resource.cdnPolicy.negativeCaching",
        "resource.cdnPolicy.negativeCachingPolicy",
        "resource.cdnPolicy.negativeCachingPolicy.code",
        "resource.cdnPolicy.negativeCachingPolicy.ttl",
        "resource.cdnPolicy.requestCoalescing",
        "resource.cdnPolicy.serveWhileStale",
        "resource.cdnPolicy.signedUrlCacheMaxAgeSec",
        "resource.checkIntervalSec",
        "resource.circuitBreakers",
        "resource.circuitBreakers.maxConnections",
        "resource.circuitBreakers.maxPendingRequests",
        "resource.circuitBreakers.maxRequests",
        "resource.circuitBreakers.maxRequestsPerConnection",
        "resource.circuitBreakers.maxRetries",
        "resource.cloudFunction.function",
        "resource.cloudFunction.urlMask",
        "resource.cloudRun.service",
        "resource.cloudRun.tag",
        "resource.cloudRun.urlMask",
        "resource.compressionMode",
        "resource.connectionDraining",
        "resource.connectionDraining.drainingTimeoutSec",
        "resource.connectionTrackingPolicy",
        "resource.connectionTrackingPolicy.connectionPersistenceOnUnhealthyBackends",
        "resource.connectionTrackingPolicy.enableStrongAffinity",
        "resource.connectionTrackingPolicy.idleTimeoutSec",
        "resource.connectionTrackingPolicy.trackingMode",
        "resource.consistentHash",
        "resource.consistentHash.httpCookie",
        "resource.consistentHash.httpCookie.name",
        "resource.consistentHash.httpCookie.path",
        "resource.consistentHash.httpCookie.ttl",
        "resource.consistentHash.httpCookie.ttl.nanos",
        "resource.consistentHash.httpCookie.ttl.seconds",
        "resource.consistentHash.minimumRingSize",
        "resource.customFeatures",
        "resource.customRequestHeaders",
        "resource.customResponseHeaders",
        "resource.defaultCustomErrorResponsePolicy",
        "resource.defaultCustomErrorResponsePolicy.errorResponseRules",
        "resource.defaultCustomErrorResponsePolicy.errorResponseRules.matchResponseCodes",
        "resource.defaultCustomErrorResponsePolicy.errorResponseRules.overrideResponseCode",
        "resource.defaultCustomErrorResponsePolicy.errorResponseRules.path",
        "resource.defaultPort",
        "resource.defaultRouteAction",
        "resource.defaultRouteAction.corsPolicy",
        "resource.defaultRouteAction.corsPolicy.allowCredentials",
        "resource.defaultRouteAction.corsPolicy.allowHeaders",
        "resource.defaultRouteAction.corsPolicy.allowMethods",
        "resource.defaultRouteAction.corsPolicy.allowOriginRegexes",
        "resource.defaultRouteAction.corsPolicy.allowOrigins",
        "resource.defaultRouteAction.corsPolicy.disabled",
        "resource.defaultRouteAction.corsPolicy.exposeHeaders",
        "resource.defaultRouteAction.corsPolicy.maxAge",
        "resource.defaultRouteAction.faultInjectionPolicy",
        "resource.defaultRouteAction.faultInjectionPolicy.abort",
        "resource.defaultRouteAction.faultInjectionPolicy.abort.httpStatus",
        "resource.defaultRouteAction.faultInjectionPolicy.abort.percentage",
        "resource.defaultRouteAction.faultInjectionPolicy.delay",
        "resource.defaultRouteAction.faultInjectionPolicy.delay.fixedDelay",
        "resource.defaultRouteAction.faultInjectionPolicy.delay.fixedDelay.nanos",
        "resource.defaultRouteAction.faultInjectionPolicy.delay.fixedDelay.seconds",
        "resource.defaultRouteAction.faultInjectionPolicy.delay.percentage",
        "resource.defaultRouteAction.maxStreamDuration",
        "resource.defaultRouteAction.maxStreamDuration.nanos",
        "resource.defaultRouteAction.maxStreamDuration.seconds",
        "resource.defaultRouteAction.requestMirrorPolicy",
        "resource.defaultRouteAction.retryPolicy",
        "resource.defaultRouteAction.retryPolicy.numRetries",
        "resource.defaultRouteAction.retryPolicy.perTryTimeout",
        "resource.defaultRouteAction.retryPolicy.perTryTimeout.nanos",
        "resource.defaultRouteAction.retryPolicy.perTryTimeout.seconds",
        "resource.defaultRouteAction.retryPolicy.retryConditions",
        "resource.defaultRouteAction.timeout",
        "resource.defaultRouteAction.timeout.nanos",
        "resource.defaultRouteAction.timeout.seconds",
        "resource.defaultRouteAction.urlRewrite",
        "resource.defaultRouteAction.urlRewrite.hostRewrite",
        "resource.defaultRouteAction.urlRewrite.pathPrefixRewrite",
        "resource.defaultRouteAction.urlRewrite.pathTemplateRewrite",
        "resource.defaultRouteAction.weightedBackendServices",
        "resource.defaultRouteAction.weightedBackendServices.headerAction",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToAdd",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToAdd.headerName",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToAdd.headerValue",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToAdd.replace",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToRemove",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToAdd",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToAdd.headerName",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToAdd.headerValue",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToAdd.replace",
        "resource.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToRemove",
        "resource.defaultRouteAction.weightedBackendServices.weight",
        "resource.defaultUrlRedirect",
        "resource.defaultUrlRedirect.hostRedirect",
        "resource.defaultUrlRedirect.httpsRedirect",
        "resource.defaultUrlRedirect.pathRedirect",
        "resource.defaultUrlRedirect.prefixRedirect",
        "resource.defaultUrlRedirect.redirectResponseCode",
        "resource.defaultUrlRedirect.stripQuery",
        "resource.description",
        "resource.enableCDN",
        "resource.enableCdn",
        "resource.failoverConfig.failoverHealthThreshold",
        "resource.failoverPolicy",
        "resource.failoverPolicy.disableConnectionDrainOnFailover",
        "resource.failoverPolicy.dropTrafficIfUnhealthy",
        "resource.failoverPolicy.failoverRatio",
        "resource.failoverRatio",
        "resource.grpcHealthCheck.grpcServiceName",
        "resource.grpcHealthCheck.port",
        "resource.grpcHealthCheck.portSpecification",
        "resource.headerAction",
        "resource.headerAction.requestHeadersToAdd",
        "resource.headerAction.requestHeadersToAdd.headerName",
        "resource.headerAction.requestHeadersToAdd.headerValue",
        "resource.headerAction.requestHeadersToAdd.replace",
        "resource.headerAction.requestHeadersToRemove",
        "resource.headerAction.responseHeadersToAdd",
        "resource.headerAction.responseHeadersToAdd.headerName",
        "resource.headerAction.responseHeadersToAdd.headerValue",
        "resource.headerAction.responseHeadersToAdd.replace",
        "resource.headerAction.responseHeadersToRemove",
        "resource.healthyThreshold",
        "resource.hostRules",
        "resource.hostRules.description",
        "resource.hostRules.hosts",
        "resource.hostRules.pathMatcher",
        "resource.http2HealthCheck.host",
        "resource.http2HealthCheck.port",
        "resource.http2HealthCheck.portSpecification",
        "resource.http2HealthCheck.proxyHeader",
        "resource.http2HealthCheck.requestPath",
        "resource.http2HealthCheck.response",
        "resource.httpHealthCheck.host",
        "resource.httpHealthCheck.port",
        "resource.httpHealthCheck.portSpecification",
        "resource.httpHealthCheck.proxyHeader",
        "resource.httpHealthCheck.requestPath",
        "resource.httpHealthCheck.response",
        "resource.httpKeepAliveTimeoutSec",
        "resource.httpsHealthCheck.host",
        "resource.httpsHealthCheck.port",
        "resource.httpsHealthCheck.portSpecification",
        "resource.httpsHealthCheck.proxyHeader",
        "resource.httpsHealthCheck.requestPath",
        "resource.httpsHealthCheck.response",
        "resource.iap",
        "resource.iap.enabled",
        "resource.iap.oauth2ClientId",
        "resource.ipAddressSelectionPolicy",
        "resource.ipVersion",
        "resource.isMirroringCollector",
        "resource.loadBalancingAlgorithm",
        "resource.loadBalancingScheme",
        "resource.localityLbPolicies",
        "resource.localityLbPolicies.customPolicy",
        "resource.localityLbPolicies.customPolicy.data",
        "resource.localityLbPolicies.customPolicy.name",
        "resource.localityLbPolicies.policy",
        "resource.localityLbPolicies.policy.name",
        "resource.logConfig",
        "resource.logConfig.enable",
        "resource.logConfig.optionalFields",
        "resource.logConfig.optionalMode",
        "resource.logConfig.sampleRate",
        "resource.maxStreamDuration",
        "resource.maxStreamDuration.nanos",
        "resource.maxStreamDuration.seconds",
        "resource.metadataFilters",
        "resource.metadataFilters.filterLabels",
        "resource.metadataFilters.filterLabels.name",
        "resource.metadataFilters.filterLabels.value",
        "resource.metadataFilters.filterMatchCriteria",
        "resource.minTlsVersion",
        "resource.name",
        "resource.natPolicy",
        "resource.network",
        "resource.networkEndpointType",
        "resource.networkTier",
        "resource.noAutomateDnsZone",
        "resource.outlierDetection",
        "resource.outlierDetection.baseEjectionTime",
        "resource.outlierDetection.baseEjectionTime.nanos",
        "resource.outlierDetection.baseEjectionTime.seconds",
        "resource.outlierDetection.consecutiveGatewayFailure",
        "resource.outlierDetection.enforcingConsecutiveErrors",
        "resource.outlierDetection.enforcingConsecutiveGatewayFailure",
        "resource.outlierDetection.enforcingSuccessRate",
        "resource.outlierDetection.maxEjectionPercent",
        "resource.outlierDetection.successRateMinimumHosts",
        "resource.outlierDetection.successRateRequestVolume",
        "resource.outlierDetection.successRateStdevFactor",
        "resource.pathMatchers",
        "resource.pathMatchers.defaultCustomErrorResponsePolicy",
        "resource.pathMatchers.defaultCustomErrorResponsePolicy.errorResponseRules",
        "resource.pathMatchers.defaultCustomErrorResponsePolicy.errorResponseRules.matchResponseCodes",
        "resource.pathMatchers.defaultCustomErrorResponsePolicy.errorResponseRules.overrideResponseCode",
        "resource.pathMatchers.defaultCustomErrorResponsePolicy.errorResponseRules.path",
        "resource.pathMatchers.defaultRouteAction",
        "resource.pathMatchers.defaultRouteAction.corsPolicy",
        "resource.pathMatchers.defaultRouteAction.corsPolicy.allowCredentials",
        "resource.pathMatchers.defaultRouteAction.corsPolicy.allowHeaders",
        "resource.pathMatchers.defaultRouteAction.corsPolicy.allowMethods",
        "resource.pathMatchers.defaultRouteAction.corsPolicy.allowOriginRegexes",
        "resource.pathMatchers.defaultRouteAction.corsPolicy.allowOrigins",
        "resource.pathMatchers.defaultRouteAction.corsPolicy.disabled",
        "resource.pathMatchers.defaultRouteAction.corsPolicy.exposeHeaders",
        "resource.pathMatchers.defaultRouteAction.corsPolicy.maxAge",
        "resource.pathMatchers.defaultRouteAction.faultInjectionPolicy",
        "resource.pathMatchers.defaultRouteAction.faultInjectionPolicy.abort",
        "resource.pathMatchers.defaultRouteAction.faultInjectionPolicy.abort.httpStatus",
        "resource.pathMatchers.defaultRouteAction.faultInjectionPolicy.abort.percentage",
        "resource.pathMatchers.defaultRouteAction.faultInjectionPolicy.delay",
        "resource.pathMatchers.defaultRouteAction.faultInjectionPolicy.delay.fixedDelay",
        "resource.pathMatchers.defaultRouteAction.faultInjectionPolicy.delay.fixedDelay.nanos",
        "resource.pathMatchers.defaultRouteAction.faultInjectionPolicy.delay.fixedDelay.seconds",
        "resource.pathMatchers.defaultRouteAction.faultInjectionPolicy.delay.percentage",
        "resource.pathMatchers.defaultRouteAction.maxStreamDuration",
        "resource.pathMatchers.defaultRouteAction.maxStreamDuration.nanos",
        "resource.pathMatchers.defaultRouteAction.maxStreamDuration.seconds",
        "resource.pathMatchers.defaultRouteAction.requestMirrorPolicy",
        "resource.pathMatchers.defaultRouteAction.retryPolicy",
        "resource.pathMatchers.defaultRouteAction.retryPolicy.numRetries",
        "resource.pathMatchers.defaultRouteAction.retryPolicy.perTryTimeout",
        "resource.pathMatchers.defaultRouteAction.retryPolicy.perTryTimeout.nanos",
        "resource.pathMatchers.defaultRouteAction.retryPolicy.perTryTimeout.seconds",
        "resource.pathMatchers.defaultRouteAction.retryPolicy.retryConditions",
        "resource.pathMatchers.defaultRouteAction.timeout",
        "resource.pathMatchers.defaultRouteAction.timeout.nanos",
        "resource.pathMatchers.defaultRouteAction.timeout.seconds",
        "resource.pathMatchers.defaultRouteAction.urlRewrite",
        "resource.pathMatchers.defaultRouteAction.urlRewrite.hostRewrite",
        "resource.pathMatchers.defaultRouteAction.urlRewrite.pathPrefixRewrite",
        "resource.pathMatchers.defaultRouteAction.urlRewrite.pathTemplateRewrite",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToAdd",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToAdd.headerName",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToAdd.headerValue",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToAdd.replace",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.requestHeadersToRemove",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToAdd",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToAdd.headerName",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToAdd.headerValue",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToAdd.replace",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.headerAction.responseHeadersToRemove",
        "resource.pathMatchers.defaultRouteAction.weightedBackendServices.weight",
        "resource.pathMatchers.defaultUrlRedirect",
        "resource.pathMatchers.defaultUrlRedirect.hostRedirect",
        "resource.pathMatchers.defaultUrlRedirect.httpsRedirect",
        "resource.pathMatchers.defaultUrlRedirect.pathRedirect",
        "resource.pathMatchers.defaultUrlRedirect.prefixRedirect",
        "resource.pathMatchers.defaultUrlRedirect.redirectResponseCode",
        "resource.pathMatchers.defaultUrlRedirect.stripQuery",
        "resource.pathMatchers.description",
        "resource.pathMatchers.headerAction",
        "resource.pathMatchers.headerAction.requestHeadersToAdd",
        "resource.pathMatchers.headerAction.requestHeadersToAdd.headerName",
        "resource.pathMatchers.headerAction.requestHeadersToAdd.headerValue",
        "resource.pathMatchers.headerAction.requestHeadersToAdd.replace",
        "resource.pathMatchers.headerAction.requestHeadersToRemove",
        "resource.pathMatchers.headerAction.responseHeadersToAdd",
        "resource.pathMatchers.headerAction.responseHeadersToAdd.headerName",
        "resource.pathMatchers.headerAction.responseHeadersToAdd.headerValue",
        "resource.pathMatchers.headerAction.responseHeadersToAdd.replace",
        "resource.pathMatchers.headerAction.responseHeadersToRemove",
        "resource.pathMatchers.name",
        "resource.pathMatchers.pathRules",
        "resource.pathMatchers.pathRules.customErrorResponsePolicy",
        "resource.pathMatchers.pathRules.customErrorResponsePolicy.errorResponseRules",
        "resource.pathMatchers.pathRules.customErrorResponsePolicy.errorResponseRules.matchResponseCodes",
        "resource.pathMatchers.pathRules.customErrorResponsePolicy.errorResponseRules.overrideResponseCode",
        "resource.pathMatchers.pathRules.customErrorResponsePolicy.errorResponseRules.path",
        "resource.pathMatchers.pathRules.paths",
        "resource.pathMatchers.pathRules.routeAction",
        "resource.pathMatchers.pathRules.routeAction.corsPolicy",
        "resource.pathMatchers.pathRules.routeAction.corsPolicy.allowCredentials",
        "resource.pathMatchers.pathRules.routeAction.corsPolicy.allowHeaders",
        "resource.pathMatchers.pathRules.routeAction.corsPolicy.allowMethods",
        "resource.pathMatchers.pathRules.routeAction.corsPolicy.allowOriginRegexes",
        "resource.pathMatchers.pathRules.routeAction.corsPolicy.allowOrigins",
        "resource.pathMatchers.pathRules.routeAction.corsPolicy.disabled",
        "resource.pathMatchers.pathRules.routeAction.corsPolicy.exposeHeaders",
        "resource.pathMatchers.pathRules.routeAction.corsPolicy.maxAge",
        "resource.pathMatchers.pathRules.routeAction.faultInjectionPolicy",
        "resource.pathMatchers.pathRules.routeAction.faultInjectionPolicy.abort",
        "resource.pathMatchers.pathRules.routeAction.faultInjectionPolicy.abort.httpStatus",
        "resource.pathMatchers.pathRules.routeAction.faultInjectionPolicy.abort.percentage",
        "resource.pathMatchers.pathRules.routeAction.faultInjectionPolicy.delay",
        "resource.pathMatchers.pathRules.routeAction.faultInjectionPolicy.delay.fixedDelay",
        "resource.pathMatchers.pathRules.routeAction.faultInjectionPolicy.delay.fixedDelay.nanos",
        "resource.pathMatchers.pathRules.routeAction.faultInjectionPolicy.delay.fixedDelay.seconds",
        "resource.pathMatchers.pathRules.routeAction.faultInjectionPolicy.delay.percentage",
        "resource.pathMatchers.pathRules.routeAction.maxStreamDuration",
        "resource.pathMatchers.pathRules.routeAction.maxStreamDuration.nanos",
        "resource.pathMatchers.pathRules.routeAction.maxStreamDuration.seconds",
        "resource.pathMatchers.pathRules.routeAction.requestMirrorPolicy",
        "resource.pathMatchers.pathRules.routeAction.retryPolicy",
        "resource.pathMatchers.pathRules.routeAction.retryPolicy.numRetries",
        "resource.pathMatchers.pathRules.routeAction.retryPolicy.perTryTimeout",
        "resource.pathMatchers.pathRules.routeAction.retryPolicy.perTryTimeout.nanos",
        "resource.pathMatchers.pathRules.routeAction.retryPolicy.perTryTimeout.seconds",
        "resource.pathMatchers.pathRules.routeAction.retryPolicy.retryConditions",
        "resource.pathMatchers.pathRules.routeAction.timeout",
        "resource.pathMatchers.pathRules.routeAction.timeout.nanos",
        "resource.pathMatchers.pathRules.routeAction.timeout.seconds",
        "resource.pathMatchers.pathRules.routeAction.urlRewrite",
        "resource.pathMatchers.pathRules.routeAction.urlRewrite.hostRewrite",
        "resource.pathMatchers.pathRules.routeAction.urlRewrite.pathPrefixRewrite",
        "resource.pathMatchers.pathRules.routeAction.urlRewrite.pathTemplateRewrite",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.requestHeadersToAdd",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.requestHeadersToAdd.headerName",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.requestHeadersToAdd.headerValue",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.requestHeadersToAdd.replace",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.requestHeadersToRemove",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.responseHeadersToAdd",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.responseHeadersToAdd.headerName",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.responseHeadersToAdd.headerValue",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.responseHeadersToAdd.replace",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.headerAction.responseHeadersToRemove",
        "resource.pathMatchers.pathRules.routeAction.weightedBackendServices.weight",
        "resource.pathMatchers.pathRules.urlRedirect",
        "resource.pathMatchers.pathRules.urlRedirect.hostRedirect",
        "resource.pathMatchers.pathRules.urlRedirect.httpsRedirect",
        "resource.pathMatchers.pathRules.urlRedirect.pathRedirect",
        "resource.pathMatchers.pathRules.urlRedirect.prefixRedirect",
        "resource.pathMatchers.pathRules.urlRedirect.redirectResponseCode",
        "resource.pathMatchers.pathRules.urlRedirect.stripQuery",
        "resource.pathMatchers.routeRules",
        "resource.pathMatchers.routeRules.customErrorResponsePolicy",
        "resource.pathMatchers.routeRules.customErrorResponsePolicy.errorResponseRules",
        "resource.pathMatchers.routeRules.customErrorResponsePolicy.errorResponseRules.matchResponseCodes",
        "resource.pathMatchers.routeRules.customErrorResponsePolicy.errorResponseRules.overrideResponseCode",
        "resource.pathMatchers.routeRules.customErrorResponsePolicy.errorResponseRules.path",
        "resource.pathMatchers.routeRules.description",
        "resource.pathMatchers.routeRules.headerAction",
        "resource.pathMatchers.routeRules.headerAction.requestHeadersToAdd",
        "resource.pathMatchers.routeRules.headerAction.requestHeadersToAdd.headerName",
        "resource.pathMatchers.routeRules.headerAction.requestHeadersToAdd.headerValue",
        "resource.pathMatchers.routeRules.headerAction.requestHeadersToAdd.replace",
        "resource.pathMatchers.routeRules.headerAction.requestHeadersToRemove",
        "resource.pathMatchers.routeRules.headerAction.responseHeadersToAdd",
        "resource.pathMatchers.routeRules.headerAction.responseHeadersToAdd.headerName",
        "resource.pathMatchers.routeRules.headerAction.responseHeadersToAdd.headerValue",
        "resource.pathMatchers.routeRules.headerAction.responseHeadersToAdd.replace",
        "resource.pathMatchers.routeRules.headerAction.responseHeadersToRemove",
        "resource.pathMatchers.routeRules.matchRules",
        "resource.pathMatchers.routeRules.matchRules.fullPathMatch",
        "resource.pathMatchers.routeRules.matchRules.headerMatches",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.exactMatch",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.headerName",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.invertMatch",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.prefixMatch",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.presentMatch",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.rangeMatch",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.rangeMatch.rangeEnd",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.rangeMatch.rangeStart",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.regexMatch",
        "resource.pathMatchers.routeRules.matchRules.headerMatches.suffixMatch",
        "resource.pathMatchers.routeRules.matchRules.ignoreCase",
        "resource.pathMatchers.routeRules.matchRules.metadataFilters",
        "resource.pathMatchers.routeRules.matchRules.metadataFilters.filterLabels",
        "resource.pathMatchers.routeRules.matchRules.metadataFilters.filterLabels.name",
        "resource.pathMatchers.routeRules.matchRules.metadataFilters.filterLabels.value",
        "resource.pathMatchers.routeRules.matchRules.metadataFilters.filterMatchCriteria",
        "resource.pathMatchers.routeRules.matchRules.pathTemplateMatch",
        "resource.pathMatchers.routeRules.matchRules.prefixMatch",
        "resource.pathMatchers.routeRules.matchRules.queryParameterMatches",
        "resource.pathMatchers.routeRules.matchRules.queryParameterMatches.exactMatch",
        "resource.pathMatchers.routeRules.matchRules.queryParameterMatches.name",
        "resource.pathMatchers.routeRules.matchRules.queryParameterMatches.presentMatch",
        "resource.pathMatchers.routeRules.matchRules.queryParameterMatches.regexMatch",
        "resource.pathMatchers.routeRules.matchRules.regexMatch",
        "resource.pathMatchers.routeRules.priority",
        "resource.pathMatchers.routeRules.routeAction",
        "resource.pathMatchers.routeRules.routeAction.corsPolicy",
        "resource.pathMatchers.routeRules.routeAction.corsPolicy.allowCredentials",
        "resource.pathMatchers.routeRules.routeAction.corsPolicy.allowHeaders",
        "resource.pathMatchers.routeRules.routeAction.corsPolicy.allowMethods",
        "resource.pathMatchers.routeRules.routeAction.corsPolicy.allowOriginRegexes",
        "resource.pathMatchers.routeRules.routeAction.corsPolicy.allowOrigins",
        "resource.pathMatchers.routeRules.routeAction.corsPolicy.disabled",
        "resource.pathMatchers.routeRules.routeAction.corsPolicy.exposeHeaders",
        "resource.pathMatchers.routeRules.routeAction.corsPolicy.maxAge",
        "resource.pathMatchers.routeRules.routeAction.faultInjectionPolicy",
        "resource.pathMatchers.routeRules.routeAction.faultInjectionPolicy.abort",
        "resource.pathMatchers.routeRules.routeAction.faultInjectionPolicy.abort.httpStatus",
        "resource.pathMatchers.routeRules.routeAction.faultInjectionPolicy.abort.percentage",
        "resource.pathMatchers.routeRules.routeAction.faultInjectionPolicy.delay",
        "resource.pathMatchers.routeRules.routeAction.faultInjectionPolicy.delay.fixedDelay",
        "resource.pathMatchers.routeRules.routeAction.faultInjectionPolicy.delay.fixedDelay.nanos",
        "resource.pathMatchers.routeRules.routeAction.faultInjectionPolicy.delay.fixedDelay.seconds",
        "resource.pathMatchers.routeRules.routeAction.faultInjectionPolicy.delay.percentage",
        "resource.pathMatchers.routeRules.routeAction.maxStreamDuration",
        "resource.pathMatchers.routeRules.routeAction.maxStreamDuration.nanos",
        "resource.pathMatchers.routeRules.routeAction.maxStreamDuration.seconds",
        "resource.pathMatchers.routeRules.routeAction.requestMirrorPolicy",
        "resource.pathMatchers.routeRules.routeAction.retryPolicy",
        "resource.pathMatchers.routeRules.routeAction.retryPolicy.numRetries",
        "resource.pathMatchers.routeRules.routeAction.retryPolicy.perTryTimeout",
        "resource.pathMatchers.routeRules.routeAction.retryPolicy.perTryTimeout.nanos",
        "resource.pathMatchers.routeRules.routeAction.retryPolicy.perTryTimeout.seconds",
        "resource.pathMatchers.routeRules.routeAction.retryPolicy.retryConditions",
        "resource.pathMatchers.routeRules.routeAction.timeout",
        "resource.pathMatchers.routeRules.routeAction.timeout.nanos",
        "resource.pathMatchers.routeRules.routeAction.timeout.seconds",
        "resource.pathMatchers.routeRules.routeAction.urlRewrite",
        "resource.pathMatchers.routeRules.routeAction.urlRewrite.hostRewrite",
        "resource.pathMatchers.routeRules.routeAction.urlRewrite.pathPrefixRewrite",
        "resource.pathMatchers.routeRules.routeAction.urlRewrite.pathTemplateRewrite",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.requestHeadersToAdd",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.requestHeadersToAdd.headerName",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.requestHeadersToAdd.headerValue",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.requestHeadersToAdd.replace",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.requestHeadersToRemove",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.responseHeadersToAdd",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.responseHeadersToAdd.headerName",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.responseHeadersToAdd.headerValue",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.responseHeadersToAdd.replace",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.headerAction.responseHeadersToRemove",
        "resource.pathMatchers.routeRules.routeAction.weightedBackendServices.weight",
        "resource.pathMatchers.routeRules.urlRedirect",
        "resource.pathMatchers.routeRules.urlRedirect.hostRedirect",
        "resource.pathMatchers.routeRules.urlRedirect.httpsRedirect",
        "resource.pathMatchers.routeRules.urlRedirect.pathRedirect",
        "resource.pathMatchers.routeRules.urlRedirect.prefixRedirect",
        "resource.pathMatchers.routeRules.urlRedirect.redirectResponseCode",
        "resource.pathMatchers.routeRules.urlRedirect.stripQuery",
        "resource.port",
        "resource.portName",
        "resource.portRange",
        "resource.ports",
        "resource.profile",
        "resource.protocol",
        "resource.proxyBind",
        "resource.proxyHeader",
        "resource.pscData.producerPort",
        "resource.pscTargetService",
        "resource.quicOverride",
        "resource.securitySettings",
        "resource.securitySettings.awsV4Authentication",
        "resource.securitySettings.awsV4Authentication.accessKeyId",
        "resource.securitySettings.awsV4Authentication.accessKeyVersion",
        "resource.securitySettings.subjectAltNames",
        "resource.serviceDirectoryRegistrations",
        "resource.serviceDirectoryRegistrations.namespace",
        "resource.serviceDirectoryRegistrations.service",
        "resource.serviceDirectoryRegistrations.serviceDirectoryRegion",
        "resource.serviceLabel",
        "resource.sessionAffinity",
        "resource.sourceIpRanges",
        "resource.sourceRegions",
        "resource.sslHealthCheck.port",
        "resource.sslHealthCheck.portSpecification",
        "resource.sslHealthCheck.proxyHeader",
        "resource.sslHealthCheck.request",
        "resource.sslHealthCheck.response",
        "resource.strongSessionAffinityCookie",
        "resource.strongSessionAffinityCookie.name",
        "resource.strongSessionAffinityCookie.path",
        "resource.strongSessionAffinityCookie.ttl",
        "resource.strongSessionAffinityCookie.ttl.nanos",
        "resource.strongSessionAffinityCookie.ttl.seconds",
        "resource.subnetwork",
        "resource.subsetting",
        "resource.subsetting.policy",
        "resource.tcpHealthCheck.port",
        "resource.tcpHealthCheck.portSpecification",
        "resource.tcpHealthCheck.proxyHeader",
        "resource.tcpHealthCheck.request",
        "resource.tcpHealthCheck.response",
        "resource.tests",
        "resource.tests.description",
        "resource.tests.expectedOutputUrl",
        "resource.tests.expectedRedirectResponseCode",
        "resource.tests.headers",
        "resource.tests.headers.name",
        "resource.tests.headers.value",
        "resource.tests.host",
        "resource.tests.path",
        "resource.timeoutSec",
        "resource.tlsEarlyData",
        "resource.type",
        "resource.unhealthyThreshold",
        "resource.validateForProxyless"
      ]
    },
    {
      "service": "Cloud Logging",
      "resource_type": "logging.googleapis.com/Link",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/logging/docs/custom-constraints",
      "fields": [
        "resource.analyticsEnabled",
        "resource.bigqueryOptions.usePartitionedTables",
        "resource.bucketName",
        "resource.cmekSettings.kmsKeyName",
        "resource.description",
        "resource.destination",
        "resource.disabled",
        "resource.displayName",
        "resource.exclusions.description",
        "resource.exclusions.disabled",
        "resource.exclusions.filter",
        "resource.filter",
        "resource.includeChildren",
        "resource.indexConfigs.fieldPath",
        "resource.indexConfigs.type",
        "resource.interceptChildren",
        "resource.labelExtractors",
        "resource.locked",
        "resource.loggingQuery.filter",
        "resource.loggingQuery.summaryFieldEnd",
        "resource.loggingQuery.summaryFieldStart",
        "resource.loggingQuery.summaryFields.field",
        "resource.metricDescriptor.description",
        "resource.metricDescriptor.displayName",
        "resource.metricDescriptor.launchStage",
        "resource.metricDescriptor.metadata.ingestDelay",
        "resource.metricDescriptor.metadata.samplePeriod",
        "resource.metricDescriptor.metadata.timeSeriesResourceHierarchyLevel",
        "resource.metricDescriptor.metricKind",
        "resource.metricDescriptor.monitoredResourceTypes",
        "resource.metricDescriptor.name",
        "resource.metricDescriptor.type",
        "resource.metricDescriptor.unit",
        "resource.metricDescriptor.valueType",
        "resource.name",
        "resource.opsAnalyticsQuery.sqlQueryText",
        "resource.restrictedFields",
        "resource.retentionDays",
        "resource.valueExtractor",
        "resource.visibility"
      ]
    },
    {
      "service": "Service Management",
      "resource_type": "servicemanagement.googleapis.com/Service",
      "launch_status": "Preview",
      "doc_url": "https://cloud.google.com/service-infrastructure/docs/service-management/custom-constraints",
      "fields": [
        "resource.authentication.providers.audiences",
        "resource.authentication.providers.authorizationUrl",
        "resource.authentication.providers.issuer",
        "resource.authentication.providers.jwksUri",
        "resource.authentication.providers.jwtLocations.cookie",
        "resource.authentication.providers.jwtLocations.header",
        "resource.authentication.providers.jwtLocations.query",
        "resource.authentication.providers.jwtLocations.valuePrefix",
        "resource.authentication.rules.allowWithoutCredential",
        "resource.authentication.rules.oauth.canonicalScopes",
        "resource.authentication.rules.requirements.audiences",
        "resource.authentication.rules.requirements.providerId",
        "resource.authentication.rules.selector",
        "resource.backend.rules.address",
        "resource.backend.rules.deadline",
        "resource.backend.rules.disableAuth",
        "resource.backend.rules.jwtAudience",
        "resource.backend.rules.operationDeadline",
        "resource.backend.rules.pathTranslation",
        "resource.backend.rules.protocol",
        "resource.backend.rules.selector",
        "resource.billing.consumerDestinations.metrics",
        "resource.billing.consumerDestinations.monitoredResource",
        "resource.context.rules.allowedRequestExtensions",
        "resource.context.rules.allowedResponseExtensions",
        "resource.context.rules.provided",
        "resource.context.rules.requested",
        "resource.context.rules.selector",
        "resource.control.environment",
        "resource.control.methodPolicies.requestPolicies.resourcePermission",
        "resource.control.methodPolicies.requestPolicies.resourceType",
        "resource.control.methodPolicies.requestPolicies.selector",
        "resource.control.methodPolicies.selector",
        "resource.customError.rules.isErrorType",
        "resource.customError.rules.selector",
        "resource.customError.types",
        "resource.endpoints.aliases",
        "resource.endpoints.allowCors",
        "resource.endpoints.name",
        "resource.endpoints.target",
        "resource.logging.consumerDestinations.logs",
        "resource.logging.consumerDestinations.monitoredResource",
        "resource.logging.producerDestinations.logs",
        "resource.logging.producerDestinations.monitoredResource",
        "resource.logs.description",
        "resource.logs.displayName",
        "resource.logs.name",
        "resource.metrics.description",
        "resource.metrics.displayName",
        "resource.metrics.launchStage",
        "resource.metrics.metadata.ingestDelay",
        "resource.metrics.metadata.samplePeriod",
        "resource.metrics.metadata.timeSeriesResourceHierarchyLevel",
        "resource.metrics.metricKind",
        "resource.metrics.monitoredResourceTypes",
        "resource.metrics.name",
        "resource.metrics.type",
        "resource.metrics.unit",
        "resource.metrics.valueType",
        "resource.monitoredResources.description",
        "resource.monitoredResources.displayName",
        "resource.monitoredResources.launchStage",
        "resource.monitoredResources.name",
        "resource.monitoredResources.type",
        "resource.monitoring.consumerDestinations.metrics",
        "resource.monitoring.consumerDestinations.monitoredResource",
        "resource.monitoring.producerDestinations.metrics",
        "resource.monitoring.producerDestinations.monitoredResource",
        "resource.name",
        "resource.producerProjectId",
        "resource.publishing.apiShortName",
        "resource.publishing.codeownerGithubTeams",
        "resource.publishing.docTagPrefix",
        "resource.publishing.documentationUri",
        "resource.publishing.githubLabel",
        "resource.publishing.librarySettings.cppSettings.common.destinations",
        "resource.publishing.librarySettings.cppSettings.common.selectiveGapicGeneration.methods",
        "resource.publishing.librarySettings.dotnetSettings.common.destinations",
        "resource.publishing.librarySettings.dotnetSettings.common.selectiveGapicGeneration.methods",
        "resource.publishing.librarySettings.dotnetSettings.forcedNamespaceAliases",
        "resource.publishing.librarySettings.dotnetSettings.handwrittenSignatures",
        "resource.publishing.librarySettings.dotnetSettings.ignoredResources",
        "resource.publishing.librarySettings.dotnetSettings.renamedResources",
        "resource.publishing.librarySettings.dotnetSettings.renamedServices",
        "resource.publishing.librarySettings.goSettings.common.destinations",
        "resource.publishing.librarySettings.goSettings.common.selectiveGapicGeneration.methods",
        "resource.publishing.librarySettings.javaSettings.common.destinations",
        "resource.publishing.librarySettings.javaSettings.common.selectiveGapicGeneration.methods",
        "resource.publishing.librarySettings.javaSettings.libraryPackage",
        "resource.publishing.librarySettings.javaSettings.serviceClassNames",
        "resource.publishing.librarySettings.launchStage",
        "resource.publishing.librarySettings.nodeSettings.common.destinations",
        "resource.publishing.librarySettings.nodeSettings.common.selectiveGapicGeneration.methods",
        "resource.publishing.librarySettings.phpSettings.common.destinations",
        "resource.publishing.librarySettings.phpSettings.common.selectiveGapicGeneration.methods",
        "resource.publishing.librarySettings.pythonSettings.common.destinations",
        "resource.publishing.librarySettings.pythonSettings.common.selectiveGapicGeneration.methods",
        "resource.publishing.librarySettings.pythonSettings.experimentalFeatures.restAsyncIoEnabled",
        "resource.publishing.librarySettings.restNumericEnums",
        "resource.publishing.librarySettings.rubySettings.common.destinations",
        "resource.publishing.librarySettings.rubySettings.common.selectiveGapicGeneration.methods",
        "resource.publishing.librarySettings.version",
        "resource.publishing.methodSettings.autoPopulatedFields",
        "resource.publishing.methodSettings.longRunning.initialPollDelay",
        "resource.publishing.methodSettings.longRunning.maxPollDelay",
        "resource.publishing.methodSettings.longRunning.pollDelayMultiplier",
        "resource.publishing.methodSettings.longRunning.totalPollTimeout",
        "resource.publishing.methodSettings.selector",
        "resource.publishing.newIssueUri",
        "resource.publishing.organization",
        "resource.publishing.protoReferenceDocumentationUri",
        "resource.publishing.restReferenceDocumentationUri",
        "resource.quota.limits.defaultLimit",
        "resource.quota.limits.description",
        "resource.quota.limits.displayName",
        "resource.quota.limits.duration",
        "resource.quota.limits.freeTier",
        "resource.quota.limits.maxLimit",
        "resource.quota.limits.metric",
        "resource.quota.limits.name",
        "resource.quota.limits.unit",
        "resource.quota.limits.values",
        "resource.quota.metricRules.metricCosts",
        "resource.quota.metricRules.selector",
        "resource.systemParameters.rules.parameters.httpHeader",
        "resource.systemParameters.rules.parameters.name",
        "resource.systemParameters.rules.parameters.urlQueryParameter",
        "resource.systemParameters.rules.selector",
        "resource.title",
        "resource.usage.producerNotificationChannel",
        "resource.usage.requirements",
        "resource.usage.rules.allowUnregisteredCalls",
        "resource.usage.rules.selector",
        "resource.usage.rules.skipServiceControl"
      ]
    },
    {
      "service": "Memorystore",
      "resource_type": "redis.googleapis.com/Instance",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/memorystore/docs/redis/custom-constraints",
      "fields": [
        "resource.alternativeLocationId",
        "resource.authEnabled",
        "resource.authorizedNetwork",
        "resource.availableMaintenanceVersions",
        "resource.connectMode",
        "resource.customerManagedKey",
        "resource.displayName",
        "resource.locationId",
        "resource.maintenancePolicy.description",
        "resource.maintenancePolicy.weeklyMaintenanceWindow.day",
        "resource.maintenanceVersion",
        "resource.memorySizeGb",
        "resource.name",
        "resource.persistenceConfig.persistenceMode",
        "resource.persistenceConfig.rdbSnapshotPeriod",
        "resource.persistenceConfig.rdbSnapshotStartTime",
        "resource.readReplicasMode",
        "resource.redisConfigs",
        "resource.redisVersion",
        "resource.replicaCount",
        "resource.reservedIpRange",
        "resource.secondaryIpRange",
        "resource.suspensionReasons",
        "resource.tier",
        "resource.transitEncryptionMode"
      ]
    },
    {
      "service": "Memorystore for Redis Cluster",
      "resource_type": "redis.googleapis.com/Cluster",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/memorystore/docs/cluster/custom-constraints",
      "fields": [
        "resource.authorizationMode",
        "resource.deletionProtectionEnabled",
        "resource.name",
        "resource.nodeType",
        "resource.persistenceConfig.aofConfig.appendFsync",
        "resource.persistenceConfig.mode",
        "resource.persistenceConfig.rdbConfig.rdbSnapshotPeriod",
        "resource.persistenceConfig.rdbConfig.rdbSnapshotStartTime",
        "resource.pscConfigs.network",
        "resource.redisConfigs",
        "resource.replicaCount",
        "resource.shardCount",
        "resource.transitEncryptionMode"
      ]
    },
    {
      "service": "Cloud Monitoring",
      "resource_type": "monitoring.googleapis.com/AlertPolicy",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/monitoring/docs/custom-constraints",
      "fields": [
        "resource.alertStrategy.autoClose",
        "resource.alertStrategy.notificationChannelStrategy.notificationChannelNames",
        "resource.alertStrategy.notificationChannelStrategy.renotifyInterval",
        "resource.alertStrategy.notificationRateLimit.period",
        "resource.combiner",
        "resource.conditions.conditionAbsent.aggregations.alignmentPeriod",
        "resource.conditions.conditionAbsent.aggregations.crossSeriesReducer",
        "resource.conditions.conditionAbsent.aggregations.groupByFields",
        "resource.conditions.conditionAbsent.aggregations.perSeriesAligner",
        "resource.conditions.conditionAbsent.duration",
        "resource.conditions.conditionAbsent.filter",
        "resource.conditions.conditionAbsent.trigger.count",
        "resource.conditions.conditionAbsent.trigger.percent",
        "resource.conditions.conditionMatchedLog.filter",
        "resource.conditions.conditionMatchedLog.labelExtractors",
        "resource.conditions.conditionMonitoringQueryLanguage.duration",
        "resource.conditions.conditionMonitoringQueryLanguage.evaluationMissingData",
        "resource.conditions.conditionMonitoringQueryLanguage.query",
        "resource.conditions.conditionMonitoringQueryLanguage.trigger.count",
        "resource.conditions.conditionMonitoringQueryLanguage.trigger.percent",
        "resource.conditions.conditionPrometheusQueryLanguage.alertRule",
        "resource.conditions.conditionPrometheusQueryLanguage.duration",
        "resource.conditions.conditionPrometheusQueryLanguage.evaluationInterval",
        "resource.conditions.conditionPrometheusQueryLanguage.labels",
        "resource.conditions.conditionPrometheusQueryLanguage.query",
        "resource.conditions.conditionPrometheusQueryLanguage.ruleGroup",
        "resource.conditions.conditionSql.booleanTest.column",
        "resource.conditions.conditionSql.daily.periodicity",
        "resource.conditions.conditionSql.hourly.minuteOffset",
        "resource.conditions.conditionSql.hourly.periodicity",
        "resource.conditions.conditionSql.minutes.periodicity",
        "resource.conditions.conditionSql.query",
        "resource.conditions.conditionSql.rowCountTest.comparison",
        "resource.conditions.conditionSql.rowCountTest.threshold",
        "resource.conditions.conditionThreshold.aggregations.alignmentPeriod",
        "resource.conditions.conditionThreshold.aggregations.crossSeriesReducer",
        "resource.conditions.conditionThreshold.aggregations.groupByFields",
        "resource.conditions.conditionThreshold.aggregations.perSeriesAligner",
        "resource.conditions.conditionThreshold.comparison",
        "resource.conditions.conditionThreshold.denominatorAggregations.alignmentPeriod",
        "resource.conditions.conditionThreshold.denominatorAggregations.crossSeriesReducer",
        "resource.conditions.conditionThreshold.denominatorAggregations.groupByFields",
        "resource.conditions.conditionThreshold.denominatorAggregations.perSeriesAligner",
        "resource.conditions.conditionThreshold.denominatorFilter",
        "resource.conditions.conditionThreshold.duration",
        "resource.conditions.conditionThreshold.evaluationMissingData",
        "resource.conditions.conditionThreshold.filter",
        "resource.conditions.conditionThreshold.forecastOptions.forecastHorizon",
        "resource.conditions.conditionThreshold.thresholdValue",
        "resource.conditions.conditionThreshold.trigger.count",
        "resource.conditions.conditionThreshold.trigger.percent",
        "resource.conditions.displayName",
        "resource.conditions.name",
        "resource.criteria.policies",
        "resource.description",
        "resource.displayName",
        "resource.documentation.content",
        "resource.documentation.links.displayName",
        "resource.documentation.links.url",
        "resource.documentation.mimeType",
        "resource.documentation.subject",
        "resource.enabled",
        "resource.interval.endTime",
        "resource.interval.startTime",
        "resource.name",
        "resource.notificationChannels",
        "resource.severity",
        "resource.type"
      ]
    },
    {
      "service": "Network Connectivity",
      "resource_type": "networkconnectivity.googleapis.com/Group",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/network-connectivity/docs/network-connectivity-center/how-to/org-policy-constraints",
      "fields": [
        "resource.allowOnlyMeshTopologyHubs",
        "resource.autoAccept.autoAcceptProjects",
        "resource.description",
        "resource.exportPsc",
        "resource.group",
        "resource.hub",
        "resource.linkedInterconnectAttachments.includeImportRanges",
        "resource.linkedInterconnectAttachments.siteToSiteDataTransfer",
        "resource.linkedInterconnectAttachments.uris",
        "resource.linkedProducerVpcNetwork.excludeExportRanges",
        "resource.linkedProducerVpcNetwork.includeExportRanges",
        "resource.linkedProducerVpcNetwork.network",
        "resource.linkedProducerVpcNetwork.peering",
        "resource.linkedRouterApplianceInstances.includeImportRanges",
        "resource.linkedRouterApplianceInstances.instances.ipAddress",
        "resource.linkedRouterApplianceInstances.instances.virtualMachine",
        "resource.linkedRouterApplianceInstances.siteToSiteDataTransfer",
        "resource.linkedVpcNetwork.excludeExportRanges",
        "resource.linkedVpcNetwork.includeExportRanges",
        "resource.linkedVpcNetwork.uri",
        "resource.linkedVpnTunnels.includeImportRanges",
        "resource.linkedVpnTunnels.siteToSiteDataTransfer",
        "resource.linkedVpnTunnels.uris",
        "resource.policyMode",
        "resource.presetTopology"
      ]
    },
    {
      "service": "Private Service Connect",
      "resource_type": "compute.googleapis.com/NetworkAttachment",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/compute/docs/access/custom-constraints",
      "fields": [
        "resource.advancedMachineFeatures.enableNestedVirtualization",
        "resource.advancedMachineFeatures.performanceMonitoringUnit",
        "resource.advancedMachineFeatures.threadsPerCore",
        "resource.canIpForward",
        "resource.confidentialInstanceConfig.confidentialInstanceType",
        "resource.confidentialInstanceConfig.enableConfidentialCompute",
        "resource.deletionProtection",
        "resource.enableConfidentialCompute",
        "resource.guestAccelerators.acceleratorCount",
        "resource.guestAccelerators.acceleratorType",
        "resource.labels",
        "resource.licenseCodes",
        "resource.licenses",
        "resource.machineType",
        "resource.minCpuPlatform",
        "resource.name",
        "resource.networkInterfaces.network",
        "resource.networkInterfaces.networkAttachment",
        "resource.networkInterfaces.subnetwork",
        "resource.privateIpv6GoogleAccess",
        "resource.rawDisk.source",
        "resource.scheduling.nodeAffinities.key",
        "resource.scheduling.nodeAffinities.operator",
        "resource.scheduling.nodeAffinities.values",
        "resource.shieldedInstanceConfig.enableIntegrityMonitoring",
        "resource.shieldedInstanceConfig.enableSecureBoot",
        "resource.shieldedInstanceConfig.enableVtpm",
        "resource.sizeGb",
        "resource.sourceImage",
        "resource.type",
        "resource.zone"
      ]
    },
    {
      "service": "Pub/Sub",
      "resource_type": "pubsub.googleapis.com/Schema",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/pubsub/docs/custom-constraints",
      "fields": [
        "resource.ackDeadlineSeconds",
        "resource.bigqueryConfig.dropUnknownFields",
        "resource.bigqueryConfig.serviceAccountEmail",
        "resource.bigqueryConfig.table",
        "resource.bigqueryConfig.useTableSchema",
        "resource.bigqueryConfig.useTopicSchema",
        "resource.bigqueryConfig.writeMetadata",
        "resource.cloudStorageConfig.avroConfig.useTopicSchema",
        "resource.cloudStorageConfig.avroConfig.writeMetadata",
        "resource.cloudStorageConfig.bucket",
        "resource.cloudStorageConfig.filenameDatetimeFormat",
        "resource.cloudStorageConfig.filenamePrefix",
        "resource.cloudStorageConfig.filenameSuffix",
        "resource.cloudStorageConfig.maxBytes",
        "resource.cloudStorageConfig.maxDuration",
        "resource.cloudStorageConfig.maxMessages",
        "resource.cloudStorageConfig.serviceAccountEmail",
        "resource.deadLetterPolicy.deadLetterTopic",
        "resource.deadLetterPolicy.maxDeliveryAttempts",
        "resource.definition",
        "resource.enableExactlyOnceDelivery",
        "resource.enableMessageOrdering",
        "resource.expirationPolicy.ttl",
        "resource.expireTime",
        "resource.filter",
        "resource.ingestionDataSourceSettings.awsKinesis.awsRoleArn",
        "resource.ingestionDataSourceSettings.awsKinesis.consumerArn",
        "resource.ingestionDataSourceSettings.awsKinesis.gcpServiceAccount",
        "resource.ingestionDataSourceSettings.awsKinesis.streamArn",
        "resource.ingestionDataSourceSettings.cloudStorage.bucket",
        "resource.ingestionDataSourceSettings.cloudStorage.matchGlob",
        "resource.ingestionDataSourceSettings.cloudStorage.minimumObjectCreateTime",
        "resource.ingestionDataSourceSettings.cloudStorage.textFormat.delimiter",
        "resource.ingestionDataSourceSettings.platformLogsSettings.severity",
        "resource.kmsKeyName",
        "resource.messageRetentionDuration",
        "resource.messageStoragePolicy.allowedPersistenceRegions",
        "resource.messageStoragePolicy.enforceInTransit",
        "resource.messageTransforms.disabled",
        "resource.messageTransforms.enabled",
        "resource.messageTransforms.javascriptUdf.code",
        "resource.messageTransforms.javascriptUdf.functionName",
        "resource.name",
        "resource.pushConfig.attributes",
        "resource.pushConfig.noWrapper.writeMetadata",
        "resource.pushConfig.oidcToken.audience",
        "resource.pushConfig.oidcToken.serviceAccountEmail",
        "resource.pushConfig.pushEndpoint",
        "resource.retainAckedMessages",
        "resource.retryPolicy.maximumBackoff",
        "resource.retryPolicy.minimumBackoff",
        "resource.schemaSettings.encoding",
        "resource.schemaSettings.firstRevisionId",
        "resource.schemaSettings.lastRevisionId",
        "resource.schemaSettings.schema",
        "resource.topic",
        "resource.type"
      ]
    },
    {
      "service": "reCAPTCHA",
      "resource_type": "recaptchaenterprise.googleapis.com/FirewallPolicy",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/recaptcha/docs/custom-constraints",
      "fields": [
        "resource.actions.setHeader.key",
        "resource.actions.setHeader.value",
        "resource.actions.substitute.path",
        "resource.androidSettings.allowAllPackageNames",
        "resource.androidSettings.allowedPackageNames",
        "resource.androidSettings.supportNonGoogleAppStoreDistribution",
        "resource.condition",
        "resource.description",
        "resource.displayName",
        "resource.iosSettings.allowAllBundleIds",
        "resource.iosSettings.allowedBundleIds",
        "resource.iosSettings.appleDeveloperId.keyId",
        "resource.iosSettings.appleDeveloperId.privateKey",
        "resource.iosSettings.appleDeveloperId.teamId",
        "resource.name",
        "resource.path",
        "resource.testingOptions.testingChallenge",
        "resource.testingOptions.testingScore",
        "resource.wafSettings.wafFeature",
        "resource.wafSettings.wafService",
        "resource.webSettings.allowAllDomains",
        "resource.webSettings.allowAmpTraffic",
        "resource.webSettings.allowedDomains",
        "resource.webSettings.challengeSecurityPreference",
        "resource.webSettings.integrationType"
      ]
    },
    {
      "service": "Cloud Router, Cloud NAT",
      "resource_type": "compute.googleapis.com/Router",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/network-connectivity/docs/router/how-to/custom-constraints",
      "fields": [
        "resource.bgp.advertiseMode",
        "resource.bgp.advertisedGroups",
        "resource.bgp.advertisedIpRanges.description",
        "resource.bgp.advertisedIpRanges.range",
        "resource.bgp.asn",
        "resource.bgp.keepaliveInterval",
        "resource.bgpPeers",
        "resource.bgpPeers.advertiseMode",
        "resource.bgpPeers.advertisedGroups",
        "resource.bgpPeers.advertisedIpRanges.description",
        "resource.bgpPeers.advertisedIpRanges.range",
        "resource.bgpPeers.advertisedRoutePriority",
        "resource.bgpPeers.all(b,",
        "resource.bgpPeers.customLearnedIpRanges.range",
        "resource.bgpPeers.customLearnedRoutePriority",
        "resource.bgpPeers.md5AuthenticationKeyName",
        "resource.bgpPeers.peerAsn",
        "resource.bgpPeers.routerApplianceInstance",
        "resource.description",
        "resource.encryptedInterconnectRouter",
        "resource.interfaces",
        "resource.interfaces.linkedVpnTunnel",
        "resource.interfaces.subnetwork",
        "resource.md5AuthenticationKeys.name",
        "resource.name",
        "resource.nats.autoNetworkTier",
        "resource.nats.drainNatIps",
        "resource.nats.enableDynamicPortAllocation",
        "resource.nats.enableEndpointIndependentMapping",
        "resource.nats.endpointTypes",
        "resource.nats.icmpIdleTimeoutSec",
        "resource.nats.logConfig.enable",
        "resource.nats.logConfig.filter",
        "resource.nats.maxPortsPerVm",
        "resource.nats.minPortsPerVm",
        "resource.nats.name",
        "resource.nats.nat64Subnetworks.name",
        "resource.nats.natIpAllocateOption",
        "resource.nats.natIps",
        "resource.nats.rules.action.sourceNatActiveIps",
        "resource.nats.rules.action.sourceNatActiveRanges",
        "resource.nats.rules.action.sourceNatDrainIps",
        "resource.nats.rules.action.sourceNatDrainRanges",
        "resource.nats.rules.description",
        "resource.nats.rules.match",
        "resource.nats.rules.ruleNumber",
        "resource.nats.sourceSubnetworkIpRangesToNat",
        "resource.nats.sourceSubnetworkIpRangesToNat64",
        "resource.nats.subnetworks.name",
        "resource.nats.subnetworks.secondaryIpRangeNames",
        "resource.nats.subnetworks.sourceIpRangesToNat",
        "resource.nats.tcpEstablishedIdleTimeoutSec",
        "resource.nats.tcpTimeWaitTimeoutSec",
        "resource.nats.tcpTransitoryIdleTimeoutSec",
        "resource.nats.type",
        "resource.nats.udpIdleTimeoutSec",
        "resource.nccGateway",
        "resource.network"
      ]
    },
    {
      "service": "Web Security Scanner",
      "resource_type": "websecurityscanner.googleapis.com/ScanConfig",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/security-command-center/docs/org-policy-custom-constraints",
      "fields": [
        "resource.authentication.customAccount.loginUrl",
        "resource.authentication.customAccount.password",
        "resource.authentication.customAccount.username",
        "resource.authentication.googleAccount.password",
        "resource.authentication.googleAccount.username",
        "resource.authentication.iapCredential.iapTestServiceAccountInfo.targetAudienceClientId",
        "resource.blacklistPatterns",
        "resource.cloudProvider",
        "resource.customConfig.customOutput.properties.name",
        "resource.customConfig.description",
        "resource.customConfig.recommendation",
        "resource.customConfig.resourceSelector.resourceTypes",
        "resource.customConfig.severity",
        "resource.dataset",
        "resource.description",
        "resource.displayName",
        "resource.enablementState",
        "resource.expiryTime",
        "resource.exportToSecurityCommandCenter",
        "resource.ignoreHttpStatusErrors",
        "resource.intendedEnablementState",
        "resource.managedScan",
        "resource.maxQps",
        "resource.modules[*].intendedEnablementState",
        "resource.modules[*].moduleEnablementState",
        "resource.name",
        "resource.pubsubTopic",
        "resource.resourceLabelsSelector",
        "resource.resourceType",
        "resource.resourceValue",
        "resource.riskLevel",
        "resource.schedule.intervalDurationDays",
        "resource.schedule.scheduleTime",
        "resource.scope",
        "resource.serviceEnablementState",
        "resource.startingUrls",
        "resource.staticIpScan",
        "resource.tagValues",
        "resource.targetPlatforms",
        "resource.type",
        "resource.userAgent"
      ]
    },
    {
      "service": "Security Command Center",
      "resource_type": "securitycenter.googleapis.com/BigQueryExport",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/security-command-center/docs/org-policy-custom-constraints",
      "fields": [
        "resource.authentication.customAccount.loginUrl",
        "resource.authentication.customAccount.password",
        "resource.authentication.customAccount.username",
        "resource.authentication.googleAccount.password",
        "resource.authentication.googleAccount.username",
        "resource.authentication.iapCredential.iapTestServiceAccountInfo.targetAudienceClientId",
        "resource.blacklistPatterns",
        "resource.cloudProvider",
        "resource.customConfig.customOutput.properties.name",
        "resource.customConfig.description",
        "resource.customConfig.recommendation",
        "resource.customConfig.resourceSelector.resourceTypes",
        "resource.customConfig.severity",
        "resource.dataset",
        "resource.description",
        "resource.displayName",
        "resource.enablementState",
        "resource.expiryTime",
        "resource.exportToSecurityCommandCenter",
        "resource.ignoreHttpStatusErrors",
        "resource.intendedEnablementState",
        "resource.managedScan",
        "resource.maxQps",
        "resource.modules[*].intendedEnablementState",
        "resource.modules[*].moduleEnablementState",
        "resource.name",
        "resource.pubsubTopic",
        "resource.resourceLabelsSelector",
        "resource.resourceType",
        "resource.resourceValue",
        "resource.riskLevel",
        "resource.schedule.intervalDurationDays",
        "resource.schedule.scheduleTime",
        "resource.scope",
        "resource.serviceEnablementState",
        "resource.startingUrls",
        "resource.staticIpScan",
        "resource.tagValues",
        "resource.targetPlatforms",
        "resource.type",
        "resource.userAgent"
      ]
    },
    {
      "service": "Secret Manager",
      "resource_type": "secretmanager.googleapis.com/Secret",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/secret-manager/docs/secret-manager-custom-constraints",
      "fields": [
        "resource.annotations",
        "resource.expireTime",
        "resource.rotation.nextRotationTime",
        "resource.rotation.rotationPeriod",
        "resource.topics.name",
        "resource.versionAliases",
        "resource.versionDestroyTtl"
      ]
    },
    {
      "service": "security posture",
      "resource_type": "securityposture.googleapis.com/Posture",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/security-command-center/docs/security-posture-custom-constraints",
      "fields": [
        "resource.annotations",
        "resource.description",
        "resource.extensionChains.all(value,",
        "resource.name",
        "resource.policySets.description",
        "resource.policySets.policies.complianceStandards.control",
        "resource.policySets.policies.complianceStandards.standard",
        "resource.policySets.policies.constraint.orgPolicyConstraint.cannedConstraintId",
        "resource.policySets.policies.constraint.orgPolicyConstraint.policyRules.allowAll",
        "resource.policySets.policies.constraint.orgPolicyConstraint.policyRules.denyAll",
        "resource.policySets.policies.constraint.orgPolicyConstraint.policyRules.enforce",
        "resource.policySets.policies.constraint.orgPolicyConstraint.policyRules.parameters",
        "resource.policySets.policies.constraint.orgPolicyConstraint.policyRules.resourceTypes.included",
        "resource.policySets.policies.constraint.orgPolicyConstraint.policyRules.values.allowedValues",
        "resource.policySets.policies.constraint.orgPolicyConstraint.policyRules.values.deniedValues",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.customConstraint.actionType",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.customConstraint.condition",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.customConstraint.description",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.customConstraint.displayName",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.customConstraint.methodTypes",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.customConstraint.name",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.customConstraint.resourceTypes",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.policyRules.allowAll",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.policyRules.denyAll",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.policyRules.enforce",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.policyRules.parameters",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.policyRules.resourceTypes.included",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.policyRules.values.allowedValues",
        "resource.policySets.policies.constraint.orgPolicyConstraintCustom.policyRules.values.deniedValues",
        "resource.policySets.policies.constraint.securityHealthAnalyticsCustomModule.config.customOutput.properties.name",
        "resource.policySets.policies.constraint.securityHealthAnalyticsCustomModule.config.description",
        "resource.policySets.policies.constraint.securityHealthAnalyticsCustomModule.config.recommendation",
        "resource.policySets.policies.constraint.securityHealthAnalyticsCustomModule.config.resourceSelector.resourceTypes",
        "resource.policySets.policies.constraint.securityHealthAnalyticsCustomModule.config.severity",
        "resource.policySets.policies.constraint.securityHealthAnalyticsCustomModule.displayName",
        "resource.policySets.policies.constraint.securityHealthAnalyticsCustomModule.moduleEnablementState",
        "resource.policySets.policies.constraint.securityHealthAnalyticsModule.moduleEnablementState",
        "resource.policySets.policies.constraint.securityHealthAnalyticsModule.moduleName",
        "resource.policySets.policies.description",
        "resource.policySets.policies.policyId",
        "resource.policySets.policySetId",
        "resource.postureId",
        "resource.postureRevisionId",
        "resource.state",
        "resource.targetResource"
      ]
    },
    {
      "service": "Serverless VPC Access",
      "resource_type": "vpcaccess.googleapis.com/Connector",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/vpc/docs/configure-serverless-vpc-access#custom-constraints",
      "fields": [
        "resource.network"
      ]
    },
    {
      "service": "Service Extensions",
      "resource_type": "networkservices.googleapis.com/LbRouteExtension",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/service-extensions/docs/custom-constraints",
      "fields": [
        "resource.description",
        "resource.extensionChains.exists(chain,",
        "resource.extensionChains.extensions.authority",
        "resource.extensionChains.extensions.failOpen",
        "resource.extensionChains.extensions.forwardHeaders",
        "resource.extensionChains.extensions.metadata",
        "resource.extensionChains.extensions.name",
        "resource.extensionChains.extensions.supportedEvents",
        "resource.extensionChains.extensions.timeout",
        "resource.extensionChains.name",
        "resource.loadBalancingScheme",
        "resource.metadata",
        "resource.name"
      ]
    },
    {
      "service": "Cloud Service Mesh",
      "resource_type": "networksecurity.googleapis.com/AuthorizationPolicy",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/service-mesh/docs/custom-constraints",
      "fields": []
    },
    {
      "service": "Spanner",
      "resource_type": "spanner.googleapis.com/Backup",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/spanner/docs/spanner-custom-constraints",
      "fields": [
        "resource.autoscalingConfig.autoscalingLimits.maxNodes",
        "resource.autoscalingConfig.autoscalingLimits.maxProcessingUnits",
        "resource.autoscalingConfig.autoscalingLimits.minNodes",
        "resource.autoscalingConfig.autoscalingLimits.minProcessingUnits",
        "resource.autoscalingConfig.autoscalingTargets.highPriorityCpuUtilizationPercent",
        "resource.autoscalingConfig.autoscalingTargets.storageUtilizationPercent",
        "resource.baseConfig",
        "resource.config",
        "resource.database",
        "resource.displayName",
        "resource.enableDropProtection",
        "resource.expireTime",
        "resource.freeInstanceMetadata.expireBehavior",
        "resource.instanceType",
        "resource.leaderOptions",
        "resource.name",
        "resource.nodeCount",
        "resource.processingUnits",
        "resource.replicas.defaultLeaderLocation",
        "resource.replicas.location",
        "resource.replicas.type",
        "resource.versionTime"
      ]
    },
    {
      "service": "Cloud SQL",
      "resource_type": "sqladmin.googleapis.com/BackupRun",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/sql/docs/mysql/org-policy/custom-org-policy",
      "fields": [
        "resource.databaseVersion",
        "resource.description",
        "resource.diskEncryptionConfiguration.kmsKeyName",
        "resource.diskEncryptionStatus.kmsKeyVersionName",
        "resource.failoverReplica.name",
        "resource.location",
        "resource.masterInstanceName",
        "resource.name",
        "resource.nodeCount",
        "resource.project",
        "resource.region",
        "resource.replicaConfiguration.cascadableReplica",
        "resource.replicaConfiguration.failoverTarget",
        "resource.settings.activationPolicy",
        "resource.settings.activeDirectoryConfig.domain",
        "resource.settings.advancedMachineFeatures.threadsPerCore",
        "resource.settings.availabilityType",
        "resource.settings.backupConfiguration.backupRetentionSettings.retainedBackups",
        "resource.settings.backupConfiguration.backupRetentionSettings.retentionUnit",
        "resource.settings.backupConfiguration.binaryLogEnabled",
        "resource.settings.backupConfiguration.enabled",
        "resource.settings.backupConfiguration.location",
        "resource.settings.backupConfiguration.pointInTimeRecoveryEnabled",
        "resource.settings.backupConfiguration.startTime",
        "resource.settings.backupConfiguration.transactionLogRetentionDays",
        "resource.settings.collation",
        "resource.settings.connectionPoolConfig.connectionPoolingEnabled",
        "resource.settings.connectionPoolConfig.flags.name",
        "resource.settings.connectionPoolConfig.flags.value",
        "resource.settings.connectorEnforcement",
        "resource.settings.dataCacheConfig.dataCacheEnabled",
        "resource.settings.dataDiskProvisionedIops",
        "resource.settings.dataDiskProvisionedThroughput",
        "resource.settings.dataDiskSizeGb",
        "resource.settings.dataDiskType",
        "resource.settings.databaseFlags.name",
        "resource.settings.databaseFlags.value",
        "resource.settings.deletionProtectionEnabled",
        "resource.settings.denyMaintenancePeriods.endDate",
        "resource.settings.denyMaintenancePeriods.startDate",
        "resource.settings.denyMaintenancePeriods.time",
        "resource.settings.edition",
        "resource.settings.enableDataplexIntegration",
        "resource.settings.enableGoogleMlIntegration",
        "resource.settings.insightsConfig.queryInsightsEnabled",
        "resource.settings.insightsConfig.queryPlansPerMinute",
        "resource.settings.insightsConfig.queryStringLength",
        "resource.settings.insightsConfig.recordApplicationTags",
        "resource.settings.insightsConfig.recordClientAddress",
        "resource.settings.ipConfiguration.authorizedNetworks.name",
        "resource.settings.ipConfiguration.authorizedNetworks.value",
        "resource.settings.ipConfiguration.customSubjectAlternativeNames",
        "resource.settings.ipConfiguration.enablePrivatePathForGoogleCloudServices",
        "resource.settings.ipConfiguration.ipv4Enabled",
        "resource.settings.ipConfiguration.privateNetwork",
        "resource.settings.ipConfiguration.pscConfig.allowedConsumerProjects",
        "resource.settings.ipConfiguration.pscConfig.pscAutoConnections.consumerNetwork",
        "resource.settings.ipConfiguration.pscConfig.pscAutoConnections.consumerProject",
        "resource.settings.ipConfiguration.pscConfig.pscEnabled",
        "resource.settings.ipConfiguration.serverCaMode",
        "resource.settings.ipConfiguration.serverCaPool",
        "resource.settings.ipConfiguration.sslMode",
        "resource.settings.locationPreference.secondaryZone",
        "resource.settings.locationPreference.zone",
        "resource.settings.maintenanceWindow.day",
        "resource.settings.maintenanceWindow.hour",
        "resource.settings.maintenanceWindow.updateTrack",
        "resource.settings.passwordValidationPolicy.complexity",
        "resource.settings.passwordValidationPolicy.disallowUsernameSubstring",
        "resource.settings.passwordValidationPolicy.enablePasswordPolicy",
        "resource.settings.passwordValidationPolicy.minLength",
        "resource.settings.passwordValidationPolicy.passwordChangeInterval",
        "resource.settings.passwordValidationPolicy.reuseInterval",
        "resource.settings.replicationLagMaxSeconds",
        "resource.settings.retainBackupsOnDelete",
        "resource.settings.sqlServerAuditConfig.bucket",
        "resource.settings.sqlServerAuditConfig.retentionInterval",
        "resource.settings.sqlServerAuditConfig.uploadInterval",
        "resource.settings.storageAutoResize",
        "resource.settings.tier",
        "resource.settings.timeZone"
      ]
    },
    {
      "service": "Secure Source Manager",
      "resource_type": "securesourcemanager.googleapis.com/Instance",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/secure-source-manager/docs/custom-constraints",
      "fields": [
        "resource.kmsKey",
        "resource.name",
        "resource.privateConfig.caPool",
        "resource.privateConfig.isPrivate",
        "resource.privateConfig.pscAllowedProjects",
        "resource.workforceIdentityFederationConfig.enabled"
      ]
    },
    {
      "service": "Cloud Storage",
      "resource_type": "storage.googleapis.com/Bucket",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/storage/docs/custom-constraints",
      "fields": [
        "resource.versioning.enabled"
      ]
    },
    {
      "service": "Vector Search",
      "resource_type": "aiplatform.googleapis.com/Index",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/vertex-ai/docs/vector-search/custom-constraints",
      "fields": [
        "resource.description",
        "resource.displayName",
        "resource.encryptionSpec.kmsKeyName",
        "resource.indexUpdateMethod",
        "resource.metadata",
        "resource.metadataSchemaUri",
        "resource.network",
        "resource.privateServiceConnectConfig.enablePrivateServiceConnect",
        "resource.privateServiceConnectConfig.projectAllowlist",
        "resource.publicEndpointEnabled"
      ]
    },
    {
      "service": "Vertex ML Metadata",
      "resource_type": "aiplatform.googleapis.com/MetadataStore",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/vertex-ai/docs/ml-metadata/use-custom-constraints",
      "fields": [
        "resource.dataplexConfig.enabledPipelinesLineage",
        "resource.description",
        "resource.displayName",
        "resource.encryptionSpec.kmsKeyName"
      ]
    },
    {
      "service": "Vertex AI Pipelines",
      "resource_type": "aiplatform.googleapis.com/PipelineJob",
      "launch_status": "Preview",
      "doc_url": "https://cloud.google.com/vertex-ai/docs/pipelines/use-custom-constraints",
      "fields": [
        "resource.displayName",
        "resource.encryptionSpec.kmsKeyName",
        "resource.network",
        "resource.pipelineSpec",
        "resource.preflightValidations",
        "resource.pscInterfaceConfig.networkAttachment",
        "resource.reservedIpRanges",
        "resource.runtimeConfig.failurePolicy",
        "resource.runtimeConfig.gcsOutputDirectory",
        "resource.runtimeConfig.inputArtifacts[*].artifactId",
        "resource.runtimeConfig.parameterValues[*].boolValue",
        "resource.runtimeConfig.parameterValues[*].listValue.values",
        "resource.runtimeConfig.parameterValues[*].nullValue",
        "resource.runtimeConfig.parameterValues[*].numberValue",
        "resource.runtimeConfig.parameterValues[*].stringValue",
        "resource.runtimeConfig.parameterValues[*].structValue",
        "resource.serviceAccount",
        "resource.templateUri"
      ]
    },
    {
      "service": "Video Stitcher API",
      "resource_type": "videostitcher.googleapis.com/CdnKey",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/video-stitcher/docs/how-to/create-custom-constraints",
      "fields": [
        "resource.adTagUri",
        "resource.gamLiveConfig.networkCode",
        "resource.gamSlate.networkCode",
        "resource.gamVodConfig.networkCode",
        "resource.googleCdnKey.keyName",
        "resource.hostname",
        "resource.mediaCdnKey.keyName",
        "resource.mediaCdnKey.tokenConfig.queryParameter",
        "resource.sourceFetchOptions.headers",
        "resource.sourceUri",
        "resource.uri"
      ]
    },
    {
      "service": "Virtual Private Cloud",
      "resource_type": "compute.googleapis.com/Network",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/vpc/docs/custom-constraints",
      "fields": [
        "resource.autoCreateSubnetworks",
        "resource.collectorIlb.url",
        "resource.description",
        "resource.destRange",
        "resource.enable",
        "resource.enableUlaInternalIpv6",
        "resource.filter.IPProtocols[]",
        "resource.filter.cidrRanges[]",
        "resource.filter.direction",
        "resource.internalIpv6Range",
        "resource.ipCidrRange",
        "resource.ipv6AccessType",
        "resource.logConfig.aggregationInterval",
        "resource.logConfig.enable",
        "resource.logConfig.filterExpr",
        "resource.logConfig.flowSampling",
        "resource.logConfig.metadata",
        "resource.logConfig.metadataFields[]",
        "resource.mirroredResources.instances[].url",
        "resource.mirroredResources.subnetworks[].url",
        "resource.mirroredResources.tags[]",
        "resource.mtu",
        "resource.name",
        "resource.network",
        "resource.network.url",
        "resource.networkFirewallPolicyEnforcementOrder",
        "resource.nextHopGateway",
        "resource.nextHopIlb",
        "resource.nextHopInstance",
        "resource.nextHopIp",
        "resource.nextHopVpnTunnel",
        "resource.priority",
        "resource.privateIpGoogleAccess",
        "resource.purpose",
        "resource.role",
        "resource.routingConfig.routingMode",
        "resource.secondaryIpRanges[]",
        "resource.secondaryIpRanges[].ipCidrRange",
        "resource.secondaryIpRanges[].rangeName",
        "resource.stackType",
        "resource.tags"
      ]
    },
    {
      "service": "Cloud VPN",
      "resource_type": "compute.googleapis.com/ExternalVpnGateway",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/network-connectivity/docs/vpn/how-to/custom-constraints",
      "fields": [
        "resource.description",
        "resource.gatewayIpVersion",
        "resource.ikeVersion",
        "resource.interfaces.ipAddress",
        "resource.interfaces.ipv6Address",
        "resource.localTrafficSelector",
        "resource.name",
        "resource.network",
        "resource.peerExternalGateway",
        "resource.peerExternalGatewayInterface",
        "resource.peerGcpGateway",
        "resource.peerIp",
        "resource.redundancyType",
        "resource.remoteTrafficSelector",
        "resource.router",
        "resource.stackType",
        "resource.targetVpnGateway",
        "resource.vpnGateway",
        "resource.vpnGatewayInterface",
        "resource.vpnInterfaces.interconnectAttachment"
      ]
    },
    {
      "service": "Workflows",
      "resource_type": "workflows.googleapis.com/Workflow",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/workflows/docs/custom-constraints",
      "fields": [
        "resource.callLogLevel",
        "resource.cryptoKeyName",
        "resource.description",
        "resource.executionHistoryLevel",
        "resource.name",
        "resource.serviceAccount",
        "resource.sourceContents",
        "resource.tags",
        "resource.userEnvVars"
      ]
    },
    {
      "service": "Cloud Workstations",
      "resource_type": "workstations.googleapis.com/Workstation",
      "launch_status": "GA",
      "doc_url": "https://cloud.google.com/workstations/docs/custom-constraints",
      "fields": [
        "resource.allowedPorts.first",
        "resource.allowedPorts.last",
        "resource.annotations",
        "resource.container.args",
        "resource.container.command",
        "resource.container.env",
        "resource.container.image",
        "resource.container.runAsUser",
        "resource.container.workingDir",
        "resource.disableTcpConnections",
        "resource.displayName",
        "resource.domainConfig.domain",
        "resource.enableAuditAgent",
        "resource.encryptionKey.kmsKey",
        "resource.encryptionKey.kmsKeyServiceAccount",
        "resource.env",
        "resource.ephemeralDirectories.gcePd.diskType",
        "resource.ephemeralDirectories.gcePd.readOnly",
        "resource.ephemeralDirectories.gcePd.sourceImage",
        "resource.ephemeralDirectories.gcePd.sourceSnapshot",
        "resource.ephemeralDirectories.mountPath",
        "resource.grantWorkstationAdminRoleOnCreate",
        "resource.host.gceInstance.accelerators.count",
        "resource.host.gceInstance.accelerators.type",
        "resource.host.gceInstance.boostConfigs.accelerators.count",
        "resource.host.gceInstance.boostConfigs.accelerators.type",
        "resource.host.gceInstance.boostConfigs.bootDiskSizeGb",
        "resource.host.gceInstance.boostConfigs.enableNestedVirtualization",
        "resource.host.gceInstance.boostConfigs.machineType",
        "resource.host.gceInstance.boostConfigs.poolSize",
        "resource.host.gceInstance.bootDiskSizeGb",
        "resource.host.gceInstance.confidentialInstanceConfig.enableConfidentialCompute",
        "resource.host.gceInstance.disablePublicIpAddresses",
        "resource.host.gceInstance.disableSsh",
        "resource.host.gceInstance.enableNestedVirtualization",
        "resource.host.gceInstance.machineType",
        "resource.host.gceInstance.poolSize",
        "resource.host.gceInstance.serviceAccount",
        "resource.host.gceInstance.serviceAccountScopes",
        "resource.host.gceInstance.shieldedInstanceConfig.enableIntegrityMonitoring",
        "resource.host.gceInstance.shieldedInstanceConfig.enableSecureBoot",
        "resource.host.gceInstance.shieldedInstanceConfig.enableVtpm",
        "resource.host.gceInstance.tags",
        "resource.host.gceInstance.vmTags",
        "resource.idleTimeout",
        "resource.maxUsableWorkstations",
        "resource.name",
        "resource.network",
        "resource.persistentDirectories.gcePd.diskType",
        "resource.persistentDirectories.gcePd.fsType",
        "resource.persistentDirectories.gcePd.reclaimPolicy",
        "resource.persistentDirectories.gcePd.sizeGb",
        "resource.persistentDirectories.gcePd.sourceSnapshot",
        "resource.persistentDirectories.mountPath",
        "resource.privateClusterConfig.allowedProjects",
        "resource.privateClusterConfig.enablePrivateEndpoint",
        "resource.readinessChecks.path",
        "resource.readinessChecks.port",
        "resource.replicaZones",
        "resource.runningTimeout",
        "resource.sourceWorkstation",
        "resource.subnetwork",
        "resource.tags"
      ]
    }
  ]
}